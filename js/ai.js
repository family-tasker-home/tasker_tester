// AI Assistant - –î–∂–∞—Ä–≤—ñ—Å (Gemini API —á–µ—Ä–µ–∑ Vercel)
// –ö–æ–∂–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î —Å–≤—ñ–π –≤–∏–¥—ñ–ª–µ–Ω–∏–π API –∫–ª—é—á

let currentApiKeyIndex = 0;
let chatHistory = [];
let conversationContext = null;
let JARVIS_PROMPT = null;

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function loadUserPrompt() {
    try {
        const currentUser = window.currentUser ? window.currentUser() : null;
        if (!currentUser) {
            console.error('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return false;
        }

        const username = currentUser.username || '–ê–Ω–æ–Ω—ñ–º';
        
        // –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á —ñ–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (typeof window.getUserApiKeyIndex === 'function') {
            currentApiKeyIndex = window.getUserApiKeyIndex(username);
            console.log(`üîë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${username} –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î API –∫–ª—é—á #${currentApiKeyIndex}`);
        }
        
        // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–º–ø—Ç –∑ API
        const response = await fetch(`/api/prompts?username=${encodeURIComponent(username)}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        JARVIS_PROMPT = data.prompt;
        
        console.log('‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', username);
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É:', error);
        
        // Fallback –ø—Ä–æ–º–ø—Ç
        JARVIS_PROMPT = `–¢–∏ - –î–∂–∞—Ä–≤—ñ—Å, AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∏ Halloween Planner.
        
–î–æ–ø–æ–º–∞–≥–∞–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é –º–µ–Ω—é, –ø–æ–∫—É–ø–æ–∫, –∑–∞–≤–¥–∞–Ω—å —Ç–∞ —Ä–æ–∑–∫–ª–∞–¥—É.
–ë—É–¥—å –≤–≤—ñ—á–ª–∏–≤–∏–º, –∫–æ—Ä–∏—Å–Ω–∏–º —Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö.`;
        
        return false;
    }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ —Å–∞–π—Ç—É
function getCurrentSiteData() {
    const supplies = window.suppliesStatus || {};
    const shoppingList = window.shoppingList || {};
    const weeklyMenu = window.weeklyMenu || {};
    const dailySchedule = window.dailySchedule || [];
    const tasks = window.tasks || [];
    
    const formattedData = {
        '–ó–∞–ø–∞—Å–∏ (–ø—Ä–æ–¥—É–∫—Ç–∏ –≤–¥–æ–º–∞)': formatSupplies(supplies),
        '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫': formatShoppingList(shoppingList),
        '–ú–µ–Ω—é –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å': formatWeeklyMenu(weeklyMenu),
        '–†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è': formatDailySchedule(dailySchedule),
        '–ó–∞–≤–¥–∞–Ω–Ω—è': formatTasks(tasks)
    };
    
    return JSON.stringify(formattedData, null, 2);
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤
function formatSupplies(supplies) {
    if (!supplies || Object.keys(supplies).length === 0) return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞–ø–∞—Å–∏";
    
    const result = { '‚úÖ –Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ': [], '‚ö†Ô∏è –ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è': [], '‚ùå –í—ñ–¥—Å—É—Ç–Ω—î': [] };
    
    for (const [category, items] of Object.entries(supplies)) {
        if (!items || typeof items !== 'object') continue;
        
        for (const [item, status] of Object.entries(items)) {
            if (!status) continue;
            if (status === '‚úÖ' || status === 'available') result['‚úÖ –Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'].push(item);
            else if (status === '‚ö†Ô∏è' || status === 'low') result['‚ö†Ô∏è –ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è'].push(item);
            else if (status === '‚ùå' || status === 'needed') result['‚ùå –í—ñ–¥—Å—É—Ç–Ω—î'].push(item);
        }
    }
    
    return Object.keys(result).some(k => result[k].length > 0) ? result : "–ó–∞–ø–∞—Å–∏ –Ω–µ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ";
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫
function formatShoppingList(shoppingList) {
    if (!shoppingList || Object.keys(shoppingList).length === 0) return "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π";
    
    const result = {};
    for (const [category, items] of Object.entries(shoppingList)) {
        if (!items || !Array.isArray(items)) continue;
        const notBought = items.filter(item => !item.bought).map(item => item.name);
        if (notBought.length > 0) result[category] = notBought;
    }
    
    return Object.keys(result).length > 0 ? result : "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π";
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω—é
function formatWeeklyMenu(menu) {
    if (!menu || Object.keys(menu).length === 0) return "–ú–µ–Ω—é –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ";
    const result = {};
    for (const [day, meals] of Object.entries(menu)) {
        if (Object.keys(meals).length > 0) result[day] = meals;
    }
    return Object.keys(result).length > 0 ? result : "–ú–µ–Ω—é –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ";
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–Ω—è
function formatDailySchedule(schedule) {
    return !schedule || schedule.length === 0 ? "–†–æ–∑–∫–ª–∞–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π" : schedule.map(e => `${e.time}: ${e.text}`);
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
function formatTasks(tasks) {
    return !tasks || tasks.length === 0 ? "–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ" : tasks.map(t => ({
        '–ó–∞–≤–¥–∞–Ω–Ω—è': t.text,
        '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π': t.assignee,
        '–°—Ç–∞—Ç—É—Å': t.completed ? '–í–∏–∫–æ–Ω–∞–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—ñ'
    }));
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Gemini AI —á–µ—Ä–µ–∑ Vercel
async function sendMessageToAI(message) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç—É
    if (!JARVIS_PROMPT) {
        await loadUserPrompt();
        if (!JARVIS_PROMPT) {
            showError('‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞.');
            return;
        }
    }

    const chatContainer = document.getElementById('chatMessages');
    chatContainer.appendChild(createMessageElement(message, 'user'));
    chatContainer.scrollTop = chatContainer.scrollHeight;

    const loadingMessage = createMessageElement('–î–∂–∞—Ä–≤—ñ—Å –¥—É–º–∞—î...', 'assistant', true);
    chatContainer.appendChild(loadingMessage);
    chatContainer.scrollTop = chatContainer.scrollHeight;

    try {
        const contents = buildConversationHistory(message);
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ endpoint
        const endpoint = typeof API_ENDPOINT !== 'undefined' && API_ENDPOINT 
            ? API_ENDPOINT 
            : '/api/gemini';
        
        console.log(`üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –∑ API –∫–ª—é—á–µ–º #${currentApiKeyIndex}`);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ Vercel API –∑ –≤–∏–¥—ñ–ª–µ–Ω–∏–º –∫–ª—é—á–µ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                contents: contents,
                apiKeyIndex: currentApiKeyIndex, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–∏–π –∫–ª—é—á –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                generationConfig: {
                    temperature: 0.9,
                    topK: 40,
                    topP: 0.95,
                    maxOutputTokens: 2048,
                }
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.candidates?.[0]?.content) {
            throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini API');
        }
        
        // –õ–æ–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –∫–ª—é—á
        if (data.assignedUser) {
            console.log(`‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ –∫–ª—é—á–∞ #${data.usedApiIndex} (${data.assignedUser})`);
        }
        
        let aiResponse = data.candidates[0].content.parts[0].text;
        aiResponse = cleanMarkdown(aiResponse);

        // –û–ë–†–û–ë–ö–ê –ö–û–ú–ê–ù–î —ñ –ê–í–¢–û–ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø
const commandsExecuted = executeCommands(aiResponse);
        if (commandsExecuted.length > 0) {
            console.log('‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –∫–æ–º–∞–Ω–¥:', commandsExecuted.length);
            
            // –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ï –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –í FIREBASE –ë–ï–ó PROMPT
            const modifyCommands = commandsExecuted.filter(cmd => !cmd.type.startsWith('–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_'));
            if (modifyCommands.length > 0) {
                setTimeout(async () => {
                    console.log('üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firebase...');
                    await autoSaveToFirebaseNoPrompt();
                    conversationContext = getCurrentSiteData();
                }, 800);
            }
        }

        chatContainer.removeChild(loadingMessage);
        chatContainer.appendChild(createMessageElement(aiResponse, 'assistant'));
        chatContainer.scrollTop = chatContainer.scrollHeight;

        chatHistory.push({ role: 'user', content: message });
        chatHistory.push({ role: 'assistant', content: aiResponse });
        if (chatHistory.length > 20) chatHistory = chatHistory.slice(-20);
        
        saveHistoryToCache();

    } catch (error) {
        console.error('Error:', error);
        if (chatContainer.contains(loadingMessage)) chatContainer.removeChild(loadingMessage);
        
        showError(getErrorMessage(error));
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Firebase –ë–ï–ó PROMPT
async function autoSaveToFirebaseNoPrompt() {
    try {
        if (typeof window.auth === 'undefined' || !window.auth.currentUser) {
            console.log('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ');
            return;
        }

        const user = window.auth.currentUser;
        const userId = user.uid;

        const dataToSave = {
            supplies: window.suppliesStatus || {},
            shopping: window.shoppingList || {},
            menu: window.weeklyMenu || {},
            daily: window.dailySchedule || [],
            tasks: window.tasks || [],
            lastUpdate: new Date().toISOString()
        };

        if (typeof window.database !== 'undefined') {
            const userRef = window.database.ref(`users/${userId}`);
            await userRef.set(dataToSave);
            console.log('‚úÖ –î–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Firebase');
        }

        if (typeof window.autoSaveToCache === 'function') {
            window.autoSaveToCache();
        }

    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
    }
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
function buildConversationHistory(message) {
    const contents = [];
    
    if (chatHistory.length === 0 || !conversationContext) {
        const currentData = getCurrentSiteData();
        contents.push({
            role: 'user',
            parts: [{ text: `${JARVIS_PROMPT}\n\n–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –∑ —Å–∏—Å—Ç–µ–º–∏:\n${currentData}` }]
        });
        contents.push({
            role: 'model',
            parts: [{ text: '–ó—Ä–æ–∑—É–º—ñ–≤. –Ø –î–∂–∞—Ä–≤—ñ—Å, –≤–∞—à –∫—É—Ö–æ–Ω–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –±–∞—á—É –≤—Å—ñ –¥–∞–Ω—ñ –ø—Ä–æ –∑–∞–ø–∞—Å–∏, —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫, –º–µ–Ω—é, —Ä–æ–∑–∫–ª–∞–¥ —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è. –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏!' }]
        });
        conversationContext = currentData;
    }
    
    for (const historyItem of chatHistory) {
        contents.push({
            role: historyItem.role === 'user' ? 'user' : 'model',
            parts: [{ text: historyItem.content }]
        });
    }
    
    contents.push({ role: 'user', parts: [{ text: message }] });
    return contents;
}

function cleanMarkdown(text) {
    return text
        .replace(/\*\*(.+?)\*\*/g, '$1')
        .replace(/\*(.+?)\*/g, '$1')
        .replace(/__(.+?)__/g, '$1')
        .replace(/_(.+?)_/g, '$1');
}

function showError(message) {
    const chatContainer = document.getElementById('chatMessages');
    chatContainer.appendChild(createMessageElement(message, 'assistant'));
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

function getErrorMessage(error) {
    let msg = '–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ Gemini API.\n\n';
    if (error.message.includes('401') || error.message.includes('403')) {
        msg += '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API.';
    } else if (error.message.includes('429')) {
        msg += '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É.';
    } else if (error.message.includes('No API keys configured')) {
        msg += 'API –∫–ª—é—á—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.';
    } else if (error.message.includes('Invalid API key index')) {
        msg += '–ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å API –∫–ª—é—á–∞. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.';
    } else {
        msg += error.message;
    }
    return msg;
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
function saveHistoryToCache() {
    try {
        localStorage.setItem('jarvis_chat_history', JSON.stringify(chatHistory));
        localStorage.setItem('jarvis_context', conversationContext);
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
    }
}

function loadHistoryFromCache() {
    try {
        const savedHistory = localStorage.getItem('jarvis_chat_history');
        const savedContext = localStorage.getItem('jarvis_context');
        
        if (savedHistory) chatHistory = JSON.parse(savedHistory);
        if (savedContext) conversationContext = savedContext;
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
        chatHistory = [];
        conversationContext = null;
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function createMessageElement(content, sender, isLoading = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}${isLoading ? ' loading' : ''}`;
    
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    messageContent.innerHTML = content.replace(/\n/g, '<br>');
    
    const messageTime = document.createElement('div');
    messageTime.className = 'message-time';
    messageTime.textContent = new Date().toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' });
    
    messageDiv.appendChild(messageContent);
    messageDiv.appendChild(messageTime);
    
    return messageDiv;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∞—Ç—É
async function initChat() {
    const chatContainer = document.getElementById('chatMessages');
    if (!chatContainer) return;

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–æ–º–ø—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ API –∫–ª—é—á
    await loadUserPrompt();

    loadHistoryFromCache();
    
    if (chatHistory.length > 0) {
        for (const historyItem of chatHistory) {
            chatContainer.appendChild(createMessageElement(
                historyItem.content, 
                historyItem.role === 'user' ? 'user' : 'assistant'
            ));
        }
    } else {
        chatContainer.appendChild(createMessageElement(
            '–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –Ø –î–∂–∞—Ä–≤—ñ—Å, –≤–∞—à –∫—É—Ö–æ–Ω–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç.\n\n–Ø –±–∞—á—É –≤—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ:\n‚Ä¢ –ó–∞–ø–∞—Å–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤\n‚Ä¢ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫\n‚Ä¢ –ú–µ–Ω—é –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å\n‚Ä¢ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è\n‚Ä¢ –ó–∞–≤–¥–∞–Ω–Ω—è\n\n–ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?',
            'assistant'
        ));
    }
    
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

// UI —Ñ—É–Ω–∫—Ü—ñ—ó
function handleKeyPress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
    }
}

function sendMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();
    
    if (message) {
        sendMessageToAI(message);
        input.value = '';
        input.style.height = 'auto';
    }
}

function clearChat() {
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É?\n\n–¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –≤—Å—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏.')) return;
    
    const chatContainer = document.getElementById('chatMessages');
    if (chatContainer) {
        chatContainer.innerHTML = '';
        chatHistory = [];
        conversationContext = null;
        localStorage.removeItem('jarvis_chat_history');
        localStorage.removeItem('jarvis_context');
        initChat();
    }
}

function updateContext() {
    conversationContext = getCurrentSiteData();
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –î–∂–∞—Ä–≤—ñ—Å–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ');
}

// –í–ò–ö–û–ù–ê–ù–ù–Ø –ö–û–ú–ê–ù–î
function executeCommands(text) {
    const executedCommands = [];
    const lines = text.split('\n');
    
    for (const line of lines) {
        const trimmed = line.trim();
        
        // –ö–û–ú–ê–ù–î–ò –ü–ï–†–ï–ì–õ–Ø–î–£ –î–ê–ù–ò–•
        if (trimmed.startsWith('–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–ó–ê–ü–ê–°–ò')) {
            const freshData = refreshSuppliesData();
            executedCommands.push({ original: line, type: '–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–ó–ê–ü–ê–°–ò', data: freshData });
        }
        else if (trimmed.startsWith('–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–ü–û–ö–£–ü–ö–ò')) {
            const freshData = refreshShoppingData();
            executedCommands.push({ original: line, type: '–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–ü–û–ö–£–ü–ö–ò', data: freshData });
        }
        else if (trimmed.startsWith('–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–ú–ï–ù–Æ')) {
            const freshData = refreshMenuData();
            executedCommands.push({ original: line, type: '–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–ú–ï–ù–Æ', data: freshData });
        }
        else if (trimmed.startsWith('–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–†–û–ó–ö–õ–ê–î')) {
            const freshData = refreshScheduleData();
            executedCommands.push({ original: line, type: '–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–†–û–ó–ö–õ–ê–î', data: freshData });
        }
        else if (trimmed.startsWith('–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–ó–ê–í–î–ê–ù–ù–Ø')) {
            const freshData = refreshTasksData();
            executedCommands.push({ original: line, type: '–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–ó–ê–í–î–ê–ù–ù–Ø', data: freshData });
        }
        else if (trimmed.startsWith('–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–í–°–ï')) {
            const freshData = getCurrentSiteData();
            executedCommands.push({ original: line, type: '–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_–í–°–ï', data: freshData });
        }
        // –ö–û–ú–ê–ù–î–ò –ú–û–î–ò–§–Ü–ö–ê–¶–Ü–á
        else if (trimmed.startsWith('–î–û–î–ê–¢–ò_–ó–ê–ü–ê–°:')) {
            const params = trimmed.replace('–î–û–î–ê–¢–ò_–ó–ê–ü–ê–°:', '').trim().split(',').map(p => p.trim());
            if (params.length === 2) {
                executeAddSupply(params[0], params[1]);
                executedCommands.push({ original: line, type: '–î–û–î–ê–¢–ò_–ó–ê–ü–ê–°' });
            }
        }
        else if (trimmed.startsWith('–î–û–î–ê–¢–ò_–ü–û–ö–£–ü–ö–£:')) {
            const params = trimmed.replace('–î–û–î–ê–¢–ò_–ü–û–ö–£–ü–ö–£:', '').trim().split(',').map(p => p.trim());
            if (params.length === 2) {
                executeAddShopping(params[0], params[1]);
                executedCommands.push({ original: line, type: '–î–û–î–ê–¢–ò_–ü–û–ö–£–ü–ö–£' });
            }
        }
        else if (trimmed.startsWith('–í–ò–î–ê–õ–ò–¢–ò_–ü–û–ö–£–ü–ö–£:')) {
            const product = trimmed.replace('–í–ò–î–ê–õ–ò–¢–ò_–ü–û–ö–£–ü–ö–£:', '').trim();
            executeRemoveShopping(product);
            executedCommands.push({ original: line, type: '–í–ò–î–ê–õ–ò–¢–ò_–ü–û–ö–£–ü–ö–£' });
        }
        else if (trimmed.startsWith('–î–û–î–ê–¢–ò_–ú–ï–ù–Æ:')) {
            const params = trimmed.replace('–î–û–î–ê–¢–ò_–ú–ï–ù–Æ:', '').trim().split(',').map(p => p.trim());
            if (params.length === 3) {
                executeAddMenu(params[0], params[1], params[2]);
                executedCommands.push({ original: line, type: '–î–û–î–ê–¢–ò_–ú–ï–ù–Æ' });
            }
        }
        else if (trimmed.startsWith('–í–ò–î–ê–õ–ò–¢–ò_–ú–ï–ù–Æ:')) {
            const params = trimmed.replace('–í–ò–î–ê–õ–ò–¢–ò_–ú–ï–ù–Æ:', '').trim().split(',').map(p => p.trim());
            if (params.length === 2) {
                executeRemoveMenu(params[0], params[1]);
                executedCommands.push({ original: line, type: '–í–ò–î–ê–õ–ò–¢–ò_–ú–ï–ù–Æ' });
            }
        }
        else if (trimmed.startsWith('–î–û–î–ê–¢–ò_–†–û–ó–ö–õ–ê–î:')) {
            const params = trimmed.replace('–î–û–î–ê–¢–ò_–†–û–ó–ö–õ–ê–î:', '').trim().split(',').map(p => p.trim());
            if (params.length === 2) {
                executeAddSchedule(params[0], params[1]);
                executedCommands.push({ original: line, type: '–î–û–î–ê–¢–ò_–†–û–ó–ö–õ–ê–î' });
            }
        }
        else if (trimmed.startsWith('–í–ò–î–ê–õ–ò–¢–ò_–†–û–ó–ö–õ–ê–î:')) {
            const time = trimmed.replace('–í–ò–î–ê–õ–ò–¢–ò_–†–û–ó–ö–õ–ê–î:', '').trim();
            executeRemoveSchedule(time);
            executedCommands.push({ original: line, type: '–í–ò–î–ê–õ–ò–¢–ò_–†–û–ó–ö–õ–ê–î' });
        }
        else if (trimmed.startsWith('–î–û–î–ê–¢–ò_–ó–ê–í–î–ê–ù–ù–Ø:')) {
            const params = trimmed.replace('–î–û–î–ê–¢–ò_–ó–ê–í–î–ê–ù–ù–Ø:', '').trim().split(',').map(p => p.trim());
            if (params.length === 2) {
                executeAddTask(params[0], params[1]);
                executedCommands.push({ original: line, type: '–î–û–î–ê–¢–ò_–ó–ê–í–î–ê–ù–ù–Ø' });
            }
        }
    }
    
    return executedCommands;
}

// –ú–∞–ø—ñ–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –∑–∞–ø–∞—Å—ñ–≤
const supplyCategoryMap = {
    'meat_fish': ['–º—è—Å–æ', '—Ä–∏–±–∞', '–∫—É—Ä—è—á–µ', '—Å–≤–∏–Ω–∏–Ω–∞', '—ñ–Ω–¥–∏—á–∫–∞', '–ª–æ—Å–æ—Å—å', '—Ö–µ–∫', '—Å–∫—É–º–±—Ä—ñ—è', '–æ—Å–µ–ª–µ–¥–µ—Ü—å', '—Ç—É–Ω–µ—Ü—å', '—Å–∞—Ä–¥–∏–Ω–∏'],
    'eggs_dairy': ['—è–π—Ü—è', '—è–π—Ü–µ', '–º–æ–ª–æ–∫–æ', '—Å–º–µ—Ç–∞–Ω–∞', '—Å–∏—Ä', '–π–æ–≥—É—Ä—Ç', '–º–∞—Å–ª–æ', '–≤–µ—Ä—à–∫–∏'],
    'grains_pasta': ['–≤—ñ–≤—Å—è–Ω–∫–∞', '–≥—Ä–µ—á–∫–∞', '—Ä–∏—Å', '–±—É–ª–≥—É—Ä', '–ø—à–æ–Ω–æ', '–º–∞–Ω–∫–∞', '–∫—É—Å-–∫—É—Å', '–º–∞–∫–∞—Ä–æ–Ω–∏', '–±–æ—Ä–æ—à–Ω–æ', '–∫—Ä–æ—Ö–º–∞–ª—å'],
    'vegetables': ['–∫–∞—Ä—Ç–æ–ø–ª—è', '–º–æ—Ä–∫–≤–∞', '—Ü–∏–±—É–ª—è', '–±—É—Ä—è–∫', '–∫–∞–ø—É—Å—Ç–∞', '–ø–æ–º—ñ–¥–æ—Ä–∏', '–æ–≥—ñ—Ä–∫–∏', '–ø–µ—Ä–µ—Ü—å', '—á–∞—Å–Ω–∏–∫', '–∑–µ–ª–µ–Ω—å', '–∫–∞–±–∞—á–∫–∏', '–±–∞–∫–ª–∞–∂–∞–Ω–∏'],
    'fruits_nuts': ['—è–±–ª—É–∫–∞', '–±–∞–Ω–∞–Ω–∏', '–≥—Ä—É—à—ñ', '—è–≥–æ–¥–∏', '–≥–æ—Ä—ñ—Ö–∏', '—Å—É—Ö–æ—Ñ—Ä—É–∫—Ç–∏', '–º–µ–¥', '–≤–∞—Ä–µ–Ω–Ω—è', '—à–æ–∫–æ–ª–∞–¥'],
    'spices_oils': ['—Å—ñ–ª—å', '–ø–µ—Ä–µ—Ü—å', '–ø–∞–ø—Ä–∏–∫–∞', '–∫—É—Ä–∫—É–º–∞', '–ª–∞–≤—Ä–æ–≤–∏–π', '–±–∞–∑–∏–ª—ñ–∫', '–æ–ª—ñ—è', '—Å–æ—É—Å', '–∫–µ—Ç—á—É–ø', '–º–∞–π–æ–Ω–µ–∑', '–≥—ñ—Ä—á–∏—Ü—è', '–æ—Ü–µ—Ç'],
    'bread_bakery': ['—Ö–ª—ñ–±', '–±–∞—Ç–æ–Ω', '–±—É–ª–æ—á–∫–∏', '—Å—É—Ö–∞—Ä–∏–∫–∏', '–≥–∞–ª–µ—Ç–∏', '–∫—Ä–µ–∫–µ—Ä–∏', '–ª–∞–≤–∞—à', '—Ç–æ—Ä—Ç–∏–ª—å—ó'],
    'beverages': ['–≤–æ–¥–∞', '—á–∞–π', '–∫–∞–≤–∞', '–∫–∞–∫–∞–æ', '—Å—ñ–∫', '–∫–æ–º–ø–æ—Ç'],
    'canned_goods': ['–≥–æ—Ä–æ—à–æ–∫', '–∫—É–∫—É—Ä—É–¥–∑–∞', '–∫–≤–∞—Å–æ–ª—è', '—Ç–æ–º–∞—Ç–Ω–∞ –ø–∞—Å—Ç–∞', '–æ–ª–∏–≤–∫–∏', '–º–∞—Å–ª–∏–Ω–∏', '–≥—Ä–∏–±–∏', '—Ç—É—à–æ–Ω–∫–∞'],
    'baking_supplies': ['—Ü—É–∫–æ—Ä', '–≤–∞–Ω—ñ–ª—å–Ω–∏–π', '—Ä–æ–∑–ø—É—à—É–≤–∞—á', '–∫–∞–∫–∞–æ', '–º–µ–¥–æ–≤—ñ –∫–æ—Ä–∂—ñ']
};

function findSupplyCategory(productName) {
    const lower = productName.toLowerCase();
    for (const [category, keywords] of Object.entries(supplyCategoryMap)) {
        if (keywords.some(kw => lower.includes(kw))) return category;
    }
    return 'vegetables';
}

// –ö–û–ú–ê–ù–î–ò –í–ò–ö–û–ù–ê–ù–ù–Ø
function executeAddSupply(product, statusText) {
    const statusMap = { '—î': 'available', '–∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è': 'low', '–Ω–µ–º–∞—î': 'needed' };
    const status = statusMap[statusText.toLowerCase()] || 'available';
    const category = findSupplyCategory(product);
    
    if (!window.suppliesStatus[category]) window.suppliesStatus[category] = {};
    window.suppliesStatus[category][product] = status;
    
    if (typeof window.renderSupplies === 'function') window.renderSupplies();
    if (typeof window.autoSaveToCache === 'function') window.autoSaveToCache();
    
    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–ø–∞—Å: ${product} (${statusText})`);
}

function executeAddShopping(categoryName, product) {
    const categoryMap = {
        "–º'—è—Å–æ": "üçñ –ú—è—Å–æ —Ç–∞ —Ä–∏–±–∞",
        "–º–æ–ª–æ—á–Ω–µ": "ü•õ –ú–æ–ª–æ—á–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏",
        "–æ–≤–æ—á—ñ": "ü•ó –û–≤–æ—á—ñ —Ç–∞ —Ñ—Ä—É–∫—Ç–∏",
        "–±–∞–∫–∞–ª—ñ—è": "üçù –ë–∞–∫–∞–ª—ñ—è",
        "—Ö–ª—ñ–±": "ü•ñ –•–ª—ñ–± —Ç–∞ –≤–∏–ø—ñ—á–∫–∞",
        "–Ω–∞–ø–æ—ó": "ü•§ –ù–∞–ø–æ—ó",
        "—ñ–Ω—à–µ": "üì¶ –Ü–Ω—à–µ"
    };
    
    const category = categoryMap[categoryName.toLowerCase()] || "üì¶ –Ü–Ω—à–µ";
    
    if (!window.shoppingList[category]) window.shoppingList[category] = [];
    
    const exists = window.shoppingList[category].some(item => 
        item.name.toLowerCase() === product.toLowerCase()
    );
    
    if (!exists) {
        window.shoppingList[category].push({
            id: Date.now() + Math.random(),
            name: product,
            bought: false
        });
        
        if (typeof window.renderList === 'function') window.renderList();
        if (typeof window.autoSaveToCache === 'function') window.autoSaveToCache();
        
        console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –≤ –ø–æ–∫—É–ø–∫–∏: ${product}`);
    }
}

function executeRemoveShopping(product) {
    let found = false;
    for (const category in window.shoppingList) {
        window.shoppingList[category] = window.shoppingList[category].filter(item => {
            if (item.name.toLowerCase().includes(product.toLowerCase())) {
                found = true;
                return false;
            }
            return true;
        });
    }
    
    if (found) {
        if (typeof window.renderList === 'function') window.renderList();
        if (typeof window.autoSaveToCache === 'function') window.autoSaveToCache();
        console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–æ–∫—É–ø–æ–∫: ${product}`);
    }
}

function executeAddMenu(day, meal, dish) {
    if (!window.weeklyMenu[day]) window.weeklyMenu[day] = {};
    window.weeklyMenu[day][meal] = dish;
    
    if (typeof window.renderMenu === 'function') window.renderMenu();
    if (typeof window.autoSaveToCache === 'function') window.autoSaveToCache();
    
    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –º–µ–Ω—é: ${day}, ${meal} - ${dish}`);
}

function executeRemoveMenu(day, meal) {
    if (window.weeklyMenu[day] && window.weeklyMenu[day][meal]) {
        delete window.weeklyMenu[day][meal];
        
        if (typeof window.renderMenu === 'function') window.renderMenu();
        if (typeof window.autoSaveToCache === 'function') window.autoSaveToCache();
        
        console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –º–µ–Ω—é: ${day}, ${meal}`);
    }
}

function executeAddSchedule(time, event) {
    if (!window.dailySchedule) window.dailySchedule = [];
    
    const existingIndex = window.dailySchedule.findIndex(item => item.time === time);
    
    if (existingIndex !== -1) {
        window.dailySchedule[existingIndex].text = event;
    } else {
        window.dailySchedule.push({
            id: Date.now() + Math.random(),
            time: time,
            text: event,
            completed: false
        });
        window.dailySchedule.sort((a, b) => a.time.localeCompare(b.time));
    }
    
    if (typeof window.renderDailySchedule === 'function') window.renderDailySchedule();
    if (typeof window.autoSaveToCache === 'function') window.autoSaveToCache();
    
    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ —Ä–æ–∑–∫–ª–∞–¥: ${time} - ${event}`);
}

function executeRemoveSchedule(time) {
    if (window.dailySchedule) {
        window.dailySchedule = window.dailySchedule.filter(item => item.time !== time);
        
        if (typeof window.renderDailySchedule === 'function') window.renderDailySchedule();
        if (typeof window.autoSaveToCache === 'function') window.autoSaveToCache();
        
        console.log(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥: ${time}`);
    }
}

function executeAddTask(task, assignee) {
    if (!window.tasks) window.tasks = [];
    
    window.tasks.push({
        id: Date.now() + Math.random(),
        text: task,
        assignee: assignee,
        completed: false
    });
    
    if (typeof window.renderTasks === 'function') window.renderTasks();
    if (typeof window.autoSaveToCache === 'function') window.autoSaveToCache();
    
    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è: ${task} (${assignee})`);
}

// –§–£–ù–ö–¶–Ü–á –û–ù–û–í–õ–ï–ù–ù–Ø –î–ê–ù–ò–•
function refreshSuppliesData() {
    const supplies = window.suppliesStatus || {};
    return `üì¶ –ó–ê–ü–ê–°–ò:\n${JSON.stringify(formatSupplies(supplies), null, 2)}`;
}

function refreshShoppingData() {
    const shopping = window.shoppingList || {};
    return `üõí –°–ü–ò–°–û–ö –ü–û–ö–£–ü–û–ö:\n${JSON.stringify(formatShoppingList(shopping), null, 2)}`;
}

function refreshMenuData() {
    const menu = window.weeklyMenu || {};
    return `üçΩÔ∏è –ú–ï–ù–Æ –ù–ê –¢–ò–ñ–î–ï–ù–¨:\n${JSON.stringify(formatWeeklyMenu(menu), null, 2)}`;
}

function refreshScheduleData() {
    const schedule = window.dailySchedule || [];
    return `üìÖ –†–û–ó–ü–û–†–Ø–î–û–ö –î–ù–Ø:\n${JSON.stringify(formatDailySchedule(schedule), null, 2)}`;
}

function refreshTasksData() {
    const tasks = window.tasks || [];
    return `üéØ –ó–ê–í–î–ê–ù–ù–Ø:\n${JSON.stringify(formatTasks(tasks), null, 2)}`;
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
window.sendMessage = sendMessage;
window.handleKeyPress = handleKeyPress;
window.clearChat = clearChat;
window.initChat = initChat;
window.updateJarvisContext = updateContext;

console.log('‚úÖ –î–∂–∞—Ä–≤—ñ—Å –∑ –≤–∏–¥—ñ–ª–µ–Ω–∏–º–∏ API –∫–ª—é—á–∞–º–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
            commandsExecuted.forEach(cmd => {
                aiResponse = aiResponse.replace(cmd.original, '');
            });
            aiResponse = aiResponse.trim();
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–∞–Ω–∏—Ö
            const viewCommands = commandsExecuted.filter(cmd => cmd.type.startsWith('–ü–ï–†–ï–ì–õ–Ø–ù–£–¢–ò_'));
            
            if (viewCommands.length > 0) {
                chatHistory.push({ role: 'user', content: message });
                if (aiResponse) {
                    chatHistory.push({ role: 'assistant', content: aiResponse });
                }
                
                let freshDataMessage = 'üìä –û–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ:\n\n';
                for (const cmd of viewCommands) {
                    freshDataMessage += cmd.data + '\n\n';
                }
                
                chatHistory.push({ role: 'user', content: freshDataMessage });
                
                chatContainer.removeChild(loadingMessage);
                if (aiResponse) {
                    chatContainer.appendChild(createMessageElement(aiResponse, 'assistant'));
                }
                chatContainer.appendChild(createMessageElement(freshDataMessage, 'user'));
                chatContainer.scrollTop = chatContainer.scrollHeight;
                
                const newLoadingMessage = createMessageElement('–î–∂–∞—Ä–≤—ñ—Å –∞–Ω–∞–ª—ñ–∑—É—î –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ...', 'assistant', true);
                chatContainer.appendChild(newLoadingMessage);
                chatContainer.scrollTop = chatContainer.scrollHeight;
                
                const followUpContents = buildConversationHistory('–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ü—ñ –¥–∞–Ω—ñ —Ç–∞ –¥–∞–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –º–æ—î –ø–∏—Ç–∞–Ω–Ω—è');
                
                const followUpResponse = await fetch(endpoint, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        contents: followUpContents,
                        apiKeyIndex: currentApiKeyIndex, // –¢–æ–π —Å–∞–º–∏–π –≤–∏–¥—ñ–ª–µ–Ω–∏–π –∫–ª—é—á
                        generationConfig: {
                            temperature: 0.9,
                            topK: 40,
                            topP: 0.95,
                            maxOutputTokens: 2048,
                        }
                    })
                });
                
                if (!followUpResponse.ok) throw new Error(`HTTP error! status: ${followUpResponse.status}`);
                
                const followUpData = await followUpResponse.json();
                if (!followUpData.candidates?.[0]?.content) throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini API');
                
                let finalResponse = followUpData.candidates[0].content.parts[0].text;
                finalResponse = cleanMarkdown(finalResponse);
                
                chatContainer.removeChild(newLoadingMessage);
                chatContainer.appendChild(createMessageElement(finalResponse, 'assistant'));
                chatContainer.scrollTop = chatContainer.scrollHeight;
                
                chatHistory.push({ role: 'assistant', content: finalResponse });
                if (chatHistory.length > 20) chatHistory = chatHistory.slice(-20);
                
                saveHistoryToCache();
                return;
            }
            
            //
