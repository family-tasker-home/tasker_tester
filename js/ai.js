// AI Assistant - –î–∂–∞—Ä–≤—ñ—Å (Gemini API —á–µ—Ä–µ–∑ Vercel) –∑ –≥–æ–ª–æ—Å–æ–≤–∏–º —Ä–µ–∂–∏–º–æ–º

let currentApiKeyIndex = 0;
let chatHistory = [];
let conversationContext = null;
let JARVIS_PROMPT = null;
let currentChatUser = null;

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function loadUserPrompt() {
    try {
        const currentUser = window.currentUser ? window.currentUser() : null;
        if (!currentUser) {
            console.error('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return false;
        }

        const username = currentUser.username || '–ê–Ω–æ–Ω—ñ–º';
        currentChatUser = username;
        
        if (typeof window.getUserApiKeyIndex === 'function') {
            currentApiKeyIndex = window.getUserApiKeyIndex(username);
            console.log(`üîë –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${username} –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î API –∫–ª—é—á #${currentApiKeyIndex}`);
        }
        
        const response = await fetch(`/api/prompts?username=${encodeURIComponent(username)}`);
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        JARVIS_PROMPT = data.prompt;
        
        console.log('‚úÖ –ü—Ä–æ–º–ø—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', username);
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É:', error);
        
        JARVIS_PROMPT = `–¢–∏ - –î–∂–∞—Ä–≤—ñ—Å, AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∏ Halloween Planner.
        
–î–æ–ø–æ–º–∞–≥–∞–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –∑ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é –º–µ–Ω—é, –ø–æ–∫—É–ø–æ–∫, –∑–∞–≤–¥–∞–Ω—å —Ç–∞ —Ä–æ–∑–∫–ª–∞–¥—É.
–ë—É–¥—å –≤–≤—ñ—á–ª–∏–≤–∏–º, –∫–æ—Ä–∏—Å–Ω–∏–º —Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —É –≤—ñ–¥–ø–æ–≤—ñ–¥—è—Ö.`;
        
        return false;
    }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∑ —Å–∞–π—Ç—É
function getCurrentSiteData() {
    const supplies = window.suppliesStatus || {};
    const shoppingList = window.shoppingList || {};
    const weeklyMenu = window.weeklyMenu || {};
    const dailySchedule = window.dailySchedule || [];
    const tasks = window.tasks || [];
    
    const formattedData = {
        '–ó–∞–ø–∞—Å–∏ (–ø—Ä–æ–¥—É–∫—Ç–∏ –≤–¥–æ–º–∞)': formatSupplies(supplies),
        '–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫': formatShoppingList(shoppingList),
        '–ú–µ–Ω—é –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å': formatWeeklyMenu(weeklyMenu),
        '–†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è': formatDailySchedule(dailySchedule),
        '–ó–∞–≤–¥–∞–Ω–Ω—è': formatTasks(tasks)
    };
    
    return JSON.stringify(formattedData, null, 2);
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤
function formatSupplies(supplies) {
    if (!supplies || Object.keys(supplies).length === 0) return "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∑–∞–ø–∞—Å–∏";
    
    const result = { '‚úÖ –Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ': [], '‚ö†Ô∏è –ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è': [], '‚ùå –í—ñ–¥—Å—É—Ç–Ω—î': [] };
    
    for (const [category, items] of Object.entries(supplies)) {
        if (!items || typeof items !== 'object') continue;
        
        for (const [item, status] of Object.entries(items)) {
            if (!status) continue;
            if (status === '‚úÖ' || status === 'available') result['‚úÖ –Ñ –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ'].push(item);
            else if (status === '‚ö†Ô∏è' || status === 'low') result['‚ö†Ô∏è –ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è'].push(item);
            else if (status === '‚ùå' || status === 'needed') result['‚ùå –í—ñ–¥—Å—É—Ç–Ω—î'].push(item);
        }
    }
    
    return Object.keys(result).some(k => result[k].length > 0) ? result : "–ó–∞–ø–∞—Å–∏ –Ω–µ –ø–æ–∑–Ω–∞—á–µ–Ω—ñ";
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫
function formatShoppingList(shoppingList) {
    if (!shoppingList || Object.keys(shoppingList).length === 0) return "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π";
    
    const result = {};
    for (const [category, items] of Object.entries(shoppingList)) {
        if (!items || !Array.isArray(items)) continue;
        const notBought = items.filter(item => !item.bought).map(item => item.name);
        if (notBought.length > 0) result[category] = notBought;
    }
    
    return Object.keys(result).length > 0 ? result : "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π";
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω—é
function formatWeeklyMenu(menu) {
    if (!menu || Object.keys(menu).length === 0) return "–ú–µ–Ω—é –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ";
    const result = {};
    for (const [day, meals] of Object.entries(menu)) {
        if (Object.keys(meals).length > 0) result[day] = meals;
    }
    return Object.keys(result).length > 0 ? result : "–ú–µ–Ω—é –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–µ";
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–Ω—è
function formatDailySchedule(schedule) {
    return !schedule || schedule.length === 0 ? "–†–æ–∑–∫–ª–∞–¥ –ø–æ—Ä–æ–∂–Ω—ñ–π" : schedule.map(e => `${e.time}: ${e.text}`);
}

// –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
function formatTasks(tasks) {
    return !tasks || tasks.length === 0 ? "–ó–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—ñ" : tasks.map(t => ({
        '–ó–∞–≤–¥–∞–Ω–Ω—è': t.text,
        '–í—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–∏–π': t.assignee,
        '–°—Ç–∞—Ç—É—Å': t.completed ? '–í–∏–∫–æ–Ω–∞–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—ñ'
    }));
}

// –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Gemini AI —á–µ—Ä–µ–∑ Vercel
async function sendMessageToAI(message) {
    if (!JARVIS_PROMPT) {
        await loadUserPrompt();
        if (!JARVIS_PROMPT) {
            showError('‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞.');
            return;
        }
    }

    const chatContainer = document.getElementById('chatMessages');
    chatContainer.appendChild(createMessageElement(message, 'user'));
    chatContainer.scrollTop = chatContainer.scrollHeight;

    const loadingMessage = createMessageElement('–î–∂–∞—Ä–≤—ñ—Å –¥—É–º–∞—î...', 'assistant', true);
    chatContainer.appendChild(loadingMessage);
    chatContainer.scrollTop = chatContainer.scrollHeight;

    try {
        const contents = buildConversationHistory(message);
        
        console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–æ Gemini API...');
        console.log('üîë API Key Index:', currentApiKeyIndex);
        
        const endpoint = typeof API_ENDPOINT !== 'undefined' && API_ENDPOINT 
            ? API_ENDPOINT 
            : '/api/gemini';
        
        const response = await fetch(endpoint, {
            method: 'POST',
            headers: { 
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                contents: contents,
                apiKeyIndex: currentApiKeyIndex,
                generationConfig: {
                    temperature: 0.9,
                    topK: 40,
                    topP: 0.95,
                    maxOutputTokens: 2048,
                }
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (!data.candidates?.[0]?.content) {
            throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini API');
        }
        
        if (data.assignedUser) {
            console.log(`‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ—Ç—Ä–∏–º–∞–Ω–∞ –≤—ñ–¥ –∫–ª—é—á–∞ #${data.usedApiIndex} (${data.assignedUser})`);
        }
        
        let aiResponse = data.candidates[0].content.parts[0].text;
        aiResponse = cleanMarkdown(aiResponse);

        console.log('üì• –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ AI:', aiResponse.substring(0, 100) + '...');

        chatHistory.push({ role: 'user', content: message });
        chatHistory.push({ role: 'assistant', content: aiResponse });
        
        if (chatHistory.length > 20) chatHistory = chatHistory.slice(-20);
        
        chatContainer.removeChild(loadingMessage);
        chatContainer.appendChild(createMessageElement(aiResponse, 'assistant'));
        chatContainer.scrollTop = chatContainer.scrollHeight;
        
        saveHistoryToCache();

    } catch (error) {
        console.error('Error:', error);
        if (chatContainer.contains(loadingMessage)) chatContainer.removeChild(loadingMessage);
        
        showError(getErrorMessage(error));
    }
}

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
function buildConversationHistory(message) {
    const contents = [];
    
    if (chatHistory.length === 0 || !conversationContext) {
        const currentData = getCurrentSiteData();
        
        contents.push({
            role: 'user',
            parts: [{ text: `${JARVIS_PROMPT}\n\n=== –ü–û–¢–û–ß–ù–Ü –î–ê–ù–Ü –ó –°–ò–°–¢–ï–ú–ò ===\n${currentData}\n\n=== –ö–Ü–ù–ï–¶–¨ –î–ê–ù–ò–• ===\n\n–í–∞–∂–ª–∏–≤–æ: –¢–∏ –º–∞—î—à –¥–æ—Å—Ç—É–ø –¥–æ –≤—Å—ñ—Ö –∫–æ–º–∞–Ω–¥.` }]
        });
        
        contents.push({
            role: 'model',
            parts: [{ text: '–ó—Ä–æ–∑—É–º—ñ–≤! –Ø –î–∂–∞—Ä–≤—ñ—Å, –≤–∞—à –∞—Å–∏—Å—Ç–µ–Ω—Ç. –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏!' }]
        });
        
        conversationContext = currentData;
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É');
    }
    
    for (const historyItem of chatHistory) {
        contents.push({
            role: historyItem.role === 'user' ? 'user' : 'model',
            parts: [{ text: historyItem.content }]
        });
    }
    
    contents.push({ role: 'user', parts: [{ text: message }] });
    
    return contents;
}

function cleanMarkdown(text) {
    return text
        .replace(/\*\*(.+?)\*\*/g, '$1')
        .replace(/\*(.+?)\*/g, '$1')
        .replace(/__(.+?)__/g, '$1')
        .replace(/_(.+?)_/g, '$1');
}

function showError(message) {
    const chatContainer = document.getElementById('chatMessages');
    chatContainer.appendChild(createMessageElement(message, 'assistant'));
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

function getErrorMessage(error) {
    let msg = '–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ Gemini API.\n\n';
    if (error.message.includes('401') || error.message.includes('403')) {
        msg += '–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API.';
    } else if (error.message.includes('429')) {
        msg += '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É.';
    } else if (error.message.includes('No API keys configured')) {
        msg += 'API –∫–ª—é—á—ñ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.';
    } else {
        msg += error.message;
    }
    return msg;
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
function saveHistoryToCache() {
    try {
        if (!currentChatUser) return;
        
        const storageKey = `jarvis_chat_history_${currentChatUser}`;
        localStorage.setItem(storageKey, JSON.stringify(chatHistory));
        
        console.log(`üíæ –Ü—Å—Ç–æ—Ä—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${currentChatUser}`);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
    }
}

function loadHistoryFromCache() {
    try {
        const currentUser = window.currentUser ? window.currentUser() : null;
        if (!currentUser) {
            chatHistory = [];
            conversationContext = null;
            return;
        }
        
        const username = currentUser.username;
        currentChatUser = username;
        
        const storageKey = `jarvis_chat_history_${username}`;
        const savedHistory = localStorage.getItem(storageKey);
        
        if (savedHistory) {
            chatHistory = JSON.parse(savedHistory);
            console.log(`‚úÖ –Ü—Å—Ç–æ—Ä—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${username}`);
        } else {
            chatHistory = [];
            console.log(`‚ÑπÔ∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó –¥–ª—è ${username}`);
        }
        
        conversationContext = null;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:', error);
        chatHistory = [];
        conversationContext = null;
    }
}

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
function createMessageElement(content, sender, isLoading = false) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${sender}${isLoading ? ' loading' : ''}`;
    
    const messageContent = document.createElement('div');
    messageContent.className = 'message-content';
    messageContent.innerHTML = content.replace(/\n/g, '<br>');
    
    const messageTime = document.createElement('div');
    messageTime.className = 'message-time';
    messageTime.textContent = new Date().toLocaleTimeString('uk-UA', { hour: '2-digit', minute: '2-digit' });
    
    messageDiv.appendChild(messageContent);
    messageDiv.appendChild(messageTime);
    
    return messageDiv;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —á–∞—Ç—É
async function initChat() {
    const chatContainer = document.getElementById('chatMessages');
    if (!chatContainer) return;

    await loadUserPrompt();
    loadHistoryFromCache();
    
    if (chatHistory.length > 0) {
        for (const historyItem of chatHistory) {
            chatContainer.appendChild(createMessageElement(
                historyItem.content, 
                historyItem.role === 'user' ? 'user' : 'assistant'
            ));
        }
        console.log(`üìú –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ ${chatHistory.length} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ —ñ—Å—Ç–æ—Ä—ñ—ó`);
    } else {
        const currentUser = window.currentUser ? window.currentUser() : null;
        const userName = currentUser ? currentUser.name : '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á';
        
        chatContainer.appendChild(createMessageElement(
            `–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, ${userName}! –Ø –î–∂–∞—Ä–≤—ñ—Å, –≤–∞—à –∞—Å–∏—Å—Ç–µ–Ω—Ç.\n\n–Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –º–µ–Ω—é, –ø–æ–∫—É–ø–∫–∞–º–∏, –∑–∞–≤–¥–∞–Ω–Ω—è–º–∏ —Ç–∞ —Ä–æ–∑–ø–æ—Ä—è–¥–∫–æ–º –¥–Ω—è. –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?`,
            'assistant'
        ));
    }
    
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

// UI —Ñ—É–Ω–∫—Ü—ñ—ó
function handleKeyPress(event) {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        sendMessage();
    }
}

function sendMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();
    
    if (message) {
        sendMessageToAI(message);
        input.value = '';
        input.style.height = 'auto';
    }
}

function clearChat() {
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É?')) return;
    
    const chatContainer = document.getElementById('chatMessages');
    if (chatContainer) {
        chatContainer.innerHTML = '';
        chatHistory = [];
        conversationContext = null;
        
        if (currentChatUser) {
            localStorage.removeItem(`jarvis_chat_history_${currentChatUser}`);
            console.log(`üóëÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${currentChatUser}`);
        }
        
        initChat();
    }
}

function updateContext() {
    conversationContext = getCurrentSiteData();
    console.log('‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –î–∂–∞—Ä–≤—ñ—Å–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ');
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π
window.sendMessage = sendMessage;
window.handleKeyPress = handleKeyPress;
window.clearChat = clearChat;
window.initChat = initChat;
window.updateJarvisContext = updateContext;
window.getCurrentSiteData = getCurrentSiteData;

console.log('‚úÖ AI Assistant –∑ —Ç–µ–∫—Å—Ç–æ–≤–∏–º —Ä–µ–∂–∏–º–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
