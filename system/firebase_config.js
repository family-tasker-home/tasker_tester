// ===== FIREBASE CONFIGURATION =====

const firebaseConfig = {
    apiKey: "AIzaSyBDpCzT9SzSJptn0LqPYP-CjRGn6p-JbW0",
    authDomain: "halloween-planner.firebaseapp.com",
    databaseURL: "https://halloween-planner-default-rtdb.firebaseio.com",
    projectId: "halloween-planner",
    storageBucket: "halloween-planner.firebasestorage.app",
    messagingSenderId: "841307055659",
    appId: "1:841307055659:web:c8713c25b29e3f908fac6e",
    measurementId: "G-WZ5HN8E1T2"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();
const auth = firebase.auth();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
window.database = database;
window.auth = auth;

// ===== UTILITY FUNCTIONS =====

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤ –≤—ñ–¥ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ Firebase
function sanitizeFirebaseKey(key) {
    if (typeof key !== 'string') return key;
    return key.replace(/[.#$/[\]]/g, '_');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –∑ –≤–∫–ª–∞–¥–µ–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏
function sanitizeFirebaseObject(obj) {
    if (obj === null || obj === undefined) return obj;
    if (typeof obj !== 'object') return obj;
    if (Array.isArray(obj)) return obj.map(sanitizeFirebaseObject);
    
    const sanitized = {};
    for (const [key, value] of Object.entries(obj)) {
        const cleanKey = sanitizeFirebaseKey(key);
        sanitized[cleanKey] = sanitizeFirebaseObject(value);
    }
    return sanitized;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –¥–∞–Ω—ñ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ (–¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó Firebase)
function isValidData(data) {
    if (data === null || data === undefined) return false;
    if (typeof data === 'object') {
        if (Array.isArray(data)) return data.length > 0;
        return Object.keys(data).length > 0;
    }
    return true;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function verifySecretCode(inputCode, username = null) {
    if (!username && window.currentUser) {
        username = window.currentUser().username;
    }
    
    if (!username || !USERS[username]) {
        console.error('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!');
        return false;
    }
    
    const user = USERS[username];
    const role = window.getCurrentRole ? window.getCurrentRole(username) : user.role;
    
    if (role === "Viewer") {
        console.error('‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ!');
        return false;
    }
    
    return inputCode === user.secretCode;
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Firebase
function handleFirebaseError(error, operation) {
    console.error(`Firebase error (${operation}):`, error);
    
    if (error.code === 'PERMISSION_DENIED') {
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Firebase.\n\n' +
              '–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n' +
              '1. –î–∞–Ω—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó\n' +
              '2. –°–ø—Ä–æ–±–∞ –∑–∞–ø–∏—Å–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±\'—î–∫—Ç\n' +
              '3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö\n\n' +
              '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    } else if (error.code === 'NETWORK_ERROR') {
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.');
    } else {
        alert(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${operation}: ${error.message}`);
    }
}

// ===== AUTO-SAVE FUNCTIONS (Internal) =====

// –í–Ω—É—Ç—Ä—ñ—à–Ω—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function saveTasksToFirebaseInternal(username, userTasksState) {
    if (!username || !userTasksState) {
        console.log('‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å');
        return false;
    }
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î —Ö–æ—á —â–æ—Å—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    if (!isValidData(userTasksState)) {
        console.log('‚ö†Ô∏è –ó–∞–≤–¥–∞–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
        return false;
    }
    
    try {
        const sanitizedUsername = sanitizeFirebaseKey(username);
        const ref = database.ref(`users/${sanitizedUsername}/tasksState`);
        await ref.set(userTasksState);
        
        const updateRef = database.ref(`users/${sanitizedUsername}/lastTasksUpdate`);
        await updateRef.set(new Date().toISOString());
        
        console.log(`üíæ –ó–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${username} –∑–±–µ—Ä–µ–∂–µ–Ω–æ`);
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:', error);
        handleFirebaseError(error, '–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å');
        return false;
    }
}

// –í–Ω—É—Ç—Ä—ñ—à–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function loadTasksFromFirebaseInternal(username) {
    if (!username) return null;
    
    try {
        const sanitizedUsername = sanitizeFirebaseKey(username);
        const ref = database.ref(`users/${sanitizedUsername}/tasksState`);
        const snapshot = await ref.once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            console.log(`‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${username} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ`);
            return data;
        }
        return null;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:', error);
        return null;
    }
}

// –í–Ω—É—Ç—Ä—ñ—à–Ω—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function saveDailyScheduleToFirebaseInternal(username, userSchedule) {
    if (!username || !userSchedule) {
        console.log('‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É');
        return false;
    }
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è: –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î —Ö–æ—á —â–æ—Å—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    if (!isValidData(userSchedule)) {
        console.log('‚ö†Ô∏è –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
        return false;
    }
    
    try {
        const sanitizedUsername = sanitizeFirebaseKey(username);
        const ref = database.ref(`users/${sanitizedUsername}/dailySchedule`);
        await ref.set(userSchedule);
        
        const updateRef = database.ref(`users/${sanitizedUsername}/lastScheduleUpdate`);
        await updateRef.set(new Date().toISOString());
        
        console.log(`üíæ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${username} –∑–±–µ—Ä–µ–∂–µ–Ω–æ`);
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É:', error);
        handleFirebaseError(error, '–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É');
        return false;
    }
}

// –í–Ω—É—Ç—Ä—ñ—à–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function loadDailyScheduleFromFirebaseInternal(username) {
    if (!username) return null;
    
    try {
        const sanitizedUsername = sanitizeFirebaseKey(username);
        const ref = database.ref(`users/${sanitizedUsername}/dailySchedule`);
        const snapshot = await ref.once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            console.log(`‚úÖ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${username} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ`);
            return data;
        }
        return null;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É:', error);
        return null;
    }
}

// ===== AUTO-SAVE WRAPPERS (Called from other modules) =====

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
window.autoSaveTasksToFirebase = async function() {
    try {
        const currentUserObj = window.currentUser ? window.currentUser() : null;
        if (!currentUserObj) {
            console.log('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return;
        }
        
        const role = window.getCurrentRole ? window.getCurrentRole(currentUserObj.username) : null;
        if (role === "Viewer") {
            console.log('‚ö†Ô∏è Viewer –Ω–µ –º–æ–∂–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –¥–∞–Ω—ñ');
            return;
        }
        
        const username = currentUserObj.username;
        const userTasksState = window.tasksState ? window.tasksState[username] : null;
        
        if (!userTasksState || Object.keys(userTasksState).length === 0) {
            console.log('‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
            return;
        }

        await saveTasksToFirebaseInternal(username, userTasksState);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:', error);
    }
};

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–Ω—è
// ===== –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø –ê–í–¢–û–ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –†–û–ó–ü–û–†–Ø–î–ö–£ –î–ù–Ø =====

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–Ω—è (–∑–∞–º—ñ–Ω—é—î —Å—Ç–∞—Ä—É –≤–µ—Ä—Å—ñ—é –≤ firebase_config.js)
window.autoSaveDailySchedule = async function() {
    try {
        const currentUserObj = window.currentUser ? window.currentUser() : null;
        if (!currentUserObj) {
            console.log('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return;
        }
        
        const username = currentUserObj.username;
        const userSchedule = window.dailyScheduleState ? window.dailyScheduleState[username] : null;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        if (!userSchedule || userSchedule.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ–º–∞—î —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
            return;
        }

        console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–ª—è ${username}...`, userSchedule);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ Firebase
        const sanitizedUsername = username.replace(/[.#$/[\]]/g, '_');
        const ref = window.database.ref(`users/${sanitizedUsername}/dailySchedule`);
        await ref.set(userSchedule);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        const updateRef = window.database.ref(`users/${sanitizedUsername}/lastScheduleUpdate`);
        await updateRef.set(new Date().toISOString());
        
        console.log(`‚úÖ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–ª—è ${username} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Firebase`);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è (—è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞)
        if (typeof window.showSaveStatus === 'function') {
            window.showSaveStatus('üíæ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', 'success');
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É:', error);
        
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–º–∏–ª–∫—É
        if (typeof window.showSaveStatus === 'function') {
            window.showSaveStatus('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!', 'error');
        }
        
        return false;
    }
};

// –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–Ω—è –ø—Ä–∏ –≤—Ö–æ–¥—ñ (–∑–∞–º—ñ–Ω—é—î —Å—Ç–∞—Ä—É –≤–µ—Ä—Å—ñ—é)
window.autoLoadDailyScheduleOnLogin = async function(username) {
    if (!username) return;
    
    try {
        console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–ª—è ${username}...`);
        
        const sanitizedUsername = username.replace(/[.#$/[\]]/g, '_');
        const ref = window.database.ref(`users/${sanitizedUsername}/dailySchedule`);
        const snapshot = await ref.once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            
            if (!window.dailyScheduleState) {
                window.dailyScheduleState = {};
            }
            
            window.dailyScheduleState[username] = data;
            console.log(`‚úÖ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–ª—è ${username} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:`, data);
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —è–∫—â–æ —Ü–µ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
            const currentUser = window.currentUser ? window.currentUser() : null;
            if (currentUser && currentUser.username === username) {
                if (typeof window.renderDailySchedule === 'function') {
                    window.renderDailySchedule();
                }
            }
        } else {
            console.log(`‚ÑπÔ∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–ª—è ${username}`);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É:', error);
    }
};

console.log('‚úÖ –û–Ω–æ–≤–ª–µ–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–Ω—é
window.autoSaveMenu = async function() {
    try {
        const currentUserObj = window.currentUser ? window.currentUser() : null;
        if (!currentUserObj) return;
        
        const role = window.getCurrentRole ? window.getCurrentRole(currentUserObj.username) : null;
        if (role === "Viewer") return;
        
        const menu = window.weeklyMenu || {};
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –º–µ–Ω—é –Ω–µ –ø–æ—Ä–æ–∂–Ω—î
        const hasData = Object.values(menu).some(day => 
            day && typeof day === 'object' && Object.keys(day).length > 0
        );
        
        const menuRef = database.ref('allData/weeklyMenu');
        await menuRef.set(hasData ? menu : null);
        
        const updateRef = database.ref('allData/lastUpdated');
        await updateRef.set(new Date().toISOString());
        
        const userRef = database.ref('allData/lastUpdatedBy');
        await userRef.set(currentUserObj.name);
        
        console.log('üíæ –ú–µ–Ω—é –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–Ω—é:', error);
        handleFirebaseError(error, '–∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–Ω—é');
    }
};

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤
window.autoSaveSupplies = async function() {
    try {
        const currentUserObj = window.currentUser ? window.currentUser() : null;
        if (!currentUserObj) return;
        
        const role = window.getCurrentRole ? window.getCurrentRole(currentUserObj.username) : null;
        if (role === "Viewer") return;
        
        const supplies = window.suppliesStatus || {};
        const sanitizedSupplies = sanitizeFirebaseObject(supplies);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –¥–∞–Ω—ñ
        const hasData = Object.keys(sanitizedSupplies).length > 0;
        
        const suppliesRef = database.ref('allData/supplies');
        await suppliesRef.set(hasData ? sanitizedSupplies : null);
        
        const updateRef = database.ref('allData/lastUpdated');
        await updateRef.set(new Date().toISOString());
        
        const userRef = database.ref('allData/lastUpdatedBy');
        await userRef.set(currentUserObj.name);
        
        console.log('üíæ –ó–∞–ø–∞—Å–∏ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤:', error);
        handleFirebaseError(error, '–∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤');
    }
};

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫
window.autoSaveShoppingList = async function() {
    try {
        const currentUserObj = window.currentUser ? window.currentUser() : null;
        if (!currentUserObj) return;
        
        const role = window.getCurrentRole ? window.getCurrentRole(currentUserObj.username) : null;
        if (role === "Viewer") return;
        
        const shopping = window.shoppingList || {};
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —î –¥–∞–Ω—ñ
        const hasData = Object.keys(shopping).length > 0;
        
        const shoppingRef = database.ref('allData/shoppingList');
        await shoppingRef.set(hasData ? shopping : null);
        
        const updateRef = database.ref('allData/lastUpdated');
        await updateRef.set(new Date().toISOString());
        
        const userRef = database.ref('allData/lastUpdatedBy');
        await userRef.set(currentUserObj.name);
        
        console.log('üíæ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫:', error);
        handleFirebaseError(error, '–∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫');
    }
};

// ===== AUTO-LOAD ON LOGIN =====

// –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø—Ä–∏ –≤—Ö–æ–¥—ñ
window.autoLoadTasksOnLogin = async function(username) {
    if (!username) return;
    
    try {
        const data = await loadTasksFromFirebaseInternal(username);
        
        if (data) {
            if (!window.tasksState) window.tasksState = {};
            window.tasksState[username] = data;
            console.log('‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:', error);
    }
};

// –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–Ω—è –ø—Ä–∏ –≤—Ö–æ–¥—ñ
window.autoLoadDailyScheduleOnLogin = async function(username) {
    if (!username) return;
    
    try {
        const data = await loadDailyScheduleFromFirebaseInternal(username);
        
        if (data) {
            if (!window.dailyScheduleState) window.dailyScheduleState = {};
            window.dailyScheduleState[username] = data;
            console.log('‚úÖ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É:', error);
    }
};

// –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö –ø—Ä–∏ –≤—Ö–æ–¥—ñ
window.autoLoadAllDataOnLogin = async function(username) {
    if (!username) return;
    
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...');
    
    try {
        const snapshot = await database.ref('allData').once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();

            if (data.weeklyMenu && typeof data.weeklyMenu === 'object') {
                window.weeklyMenu = data.weeklyMenu;
                console.log('‚úÖ –ú–µ–Ω—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
            }

            if (data.supplies && typeof data.supplies === 'object') {
                window.suppliesStatus = data.supplies;
                console.log('‚úÖ –ó–∞–ø–∞—Å–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
            }

            if (data.shoppingList && typeof data.shoppingList === 'object') {
                window.shoppingList = data.shoppingList;
                console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
            }
            
            console.log('‚úÖ –ó–∞–≥–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ Firebase');
        } else {
            console.log('‚ÑπÔ∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–∞–≥–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É Firebase');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', error);
        handleFirebaseError(error, '–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö');
    }
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await window.autoLoadTasksOnLogin(username);
    await window.autoLoadDailyScheduleOnLogin(username);
};

// ===== MANUAL SAVE/LOAD FUNCTIONS =====

window.saveAllToFirebase = async function() {
    const currentUserObj = window.currentUser ? window.currentUser() : null;
    if (!currentUserObj) {
        alert("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!");
        return;
    }
    
    const role = window.getCurrentRole(currentUserObj.username);
    if (role === "Viewer") {
        const roleInfo = window.getTodayRoleInfo(currentUserObj.username);
        alert(`‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö!\n\n–í–∞—à–∞ —Ä–æ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ (${roleInfo.dayName}): ${role}`);
        return;
    }
    
    const code = prompt("üîê –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:");
    if (!code) return;
    
    const isValid = await verifySecretCode(code, currentUserObj.username);
    if (!isValid) {
        alert("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥!");
        return;
    }

    const btn = event ? event.target : null;
    const originalText = btn ? btn.textContent : '';
    
    if (btn) {
        btn.textContent = '‚è≥ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...';
        btn.disabled = true;
    }

    try {
        // –ì–æ—Ç—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é
        const menu = window.weeklyMenu || {};
        const supplies = sanitizeFirebaseObject(window.suppliesStatus || {});
        const shopping = window.shoppingList || {};

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ –∞–±–æ null
        const allData = {
            weeklyMenu: Object.keys(menu).length > 0 ? menu : null,
            supplies: Object.keys(supplies).length > 0 ? supplies : null,
            shoppingList: Object.keys(shopping).length > 0 ? shopping : null,
            lastUpdated: new Date().toISOString(),
            lastUpdatedBy: currentUserObj.name
        };

        await database.ref('allData').set(allData);
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        const username = currentUserObj.username;
        
        if (window.tasksState && window.tasksState[username]) {
            await saveTasksToFirebaseInternal(username, window.tasksState[username]);
        }
        
        if (window.dailyScheduleState && window.dailyScheduleState[username]) {
            await saveDailyScheduleToFirebaseInternal(username, window.dailyScheduleState[username]);
        }
        
        alert(`‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ö–º–∞—Ä—É!\n\n–ó–±–µ—Ä–µ–∂–µ–Ω–æ: ${currentUserObj.name}`);
    } catch (error) {
        handleFirebaseError(error, '–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
    } finally {
        if (btn) {
            btn.textContent = originalText;
            btn.disabled = false;
        }
    }
};

window.loadAllFromFirebase = async function() {
    const confirmation = confirm("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ –∑ —Ö–º–∞—Ä–∏?\n\n–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ!");
    if (!confirmation) return;

    const btn = event ? event.target : null;
    const originalText = btn ? btn.textContent : '';
    
    if (btn) {
        btn.textContent = '‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
        btn.disabled = true;
    }

    try {
        const snapshot = await database.ref('allData').once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();

            if (data.weeklyMenu) {
                window.weeklyMenu = data.weeklyMenu;
                if (typeof window.renderMenu === 'function') {
                    window.renderMenu();
                }
            }

            if (data.supplies) {
                window.suppliesStatus = data.supplies;
                if (typeof window.renderSupplies === 'function') {
                    window.renderSupplies();
                }
            }

            if (data.shoppingList) {
                window.shoppingList = data.shoppingList;
                if (typeof window.renderList === 'function') {
                    window.renderList();
                }
            }
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            const currentUserObj = window.currentUser ? window.currentUser() : null;
            if (currentUserObj) {
                const username = currentUserObj.username;
                
                const userTasksData = await loadTasksFromFirebaseInternal(username);
                if (userTasksData) {
                    if (!window.tasksState) window.tasksState = {};
                    window.tasksState[username] = userTasksData;
                    if (typeof window.renderTasks === 'function') {
                        window.renderTasks();
                    }
                }
                
                const userScheduleData = await loadDailyScheduleFromFirebaseInternal(username);
                if (userScheduleData) {
                    if (!window.dailyScheduleState) window.dailyScheduleState = {};
                    window.dailyScheduleState[username] = userScheduleData;
                    if (typeof window.renderDailySchedule === 'function') {
                        window.renderDailySchedule();
                    }
                }
            }
            
            const lastUpdated = data.lastUpdated ? new Date(data.lastUpdated).toLocaleString('uk-UA') : '–Ω–µ–≤—ñ–¥–æ–º–æ';
            const updatedBy = data.lastUpdatedBy || '–Ω–µ–≤—ñ–¥–æ–º–æ';
            alert(`‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!\n\n–û–Ω–æ–≤–ª–µ–Ω–æ: ${lastUpdated}\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${updatedBy}`);
        } else {
            alert("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É —Ö–º–∞—Ä—ñ!");
        }
    } catch (error) {
        handleFirebaseError(error, '–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    } finally {
        if (btn) {
            btn.textContent = originalText;
            btn.disabled = false;
        }
    }
};

console.log('‚úÖ Firebase config –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–ø–æ—Ä—è–¥–∫—ñ–≤)');
