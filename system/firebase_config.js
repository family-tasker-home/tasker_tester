// ===== FIREBASE CONFIGURATION =====

const firebaseConfig = {
    apiKey: "AIzaSyBDpCzT9SzSJptn0LqPYP-CjRGn6p-JbW0",
    authDomain: "halloween-planner.firebaseapp.com",
    databaseURL: "https://halloween-planner-default-rtdb.firebaseio.com",
    projectId: "halloween-planner",
    storageBucket: "halloween-planner.firebasestorage.app",
    messagingSenderId: "841307055659",
    appId: "1:841307055659:web:c8713c25b29e3f908fac6e",
    measurementId: "G-WZ5HN8E1T2"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();
const auth = firebase.auth();

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
window.database = database;
window.auth = auth;

// ===== UTILITY FUNCTIONS =====

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤ –≤—ñ–¥ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ Firebase
function sanitizeFirebaseKey(key) {
    if (typeof key !== 'string') return key;
    return key.replace(/[.#$/[\]]/g, '_');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –∑ –≤–∫–ª–∞–¥–µ–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏
function sanitizeFirebaseObject(obj) {
    if (obj === null || obj === undefined) return obj;
    if (typeof obj !== 'object') return obj;
    if (Array.isArray(obj)) return obj.map(sanitizeFirebaseObject);
    
    const sanitized = {};
    for (const [key, value] of Object.entries(obj)) {
        const cleanKey = sanitizeFirebaseKey(key);
        sanitized[cleanKey] = sanitizeFirebaseObject(value);
    }
    return sanitized;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –¥–∞–Ω—ñ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ (–¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó Firebase)
function isValidData(data) {
    if (data === null || data === undefined) return false;
    if (typeof data === 'object') {
        if (Array.isArray(data)) return data.length > 0;
        return Object.keys(data).length > 0;
    }
    return true;
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Firebase
function handleFirebaseError(error, operation) {
    console.error(`Firebase error (${operation}):`, error);
    
    if (error.code === 'PERMISSION_DENIED') {
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Firebase.\n\n' +
              '–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:\n' +
              '1. –î–∞–Ω—ñ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –ø—Ä–∞–≤–∏–ª–∞–º –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó\n' +
              '2. –°–ø—Ä–æ–±–∞ –∑–∞–ø–∏—Å–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π –æ–±\'—î–∫—Ç\n' +
              '3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö\n\n' +
              '–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    } else if (error.code === 'NETWORK_ERROR') {
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.');
    } else {
        alert(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${operation}: ${error.message}`);
    }
}

// ===== AUTO-SAVE FUNCTIONS =====

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å
window.autoSaveTasksToFirebase = async function() {
    try {
        const currentUserObj = window.currentUser ? window.currentUser() : null;
        if (!currentUserObj) {
            console.log('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return;
        }
        
        const role = window.getCurrentRole ? window.getCurrentRole(currentUserObj.username) : null;
        if (role === "Viewer") {
            console.log('‚ö†Ô∏è Viewer –Ω–µ –º–æ–∂–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –¥–∞–Ω—ñ');
            return;
        }
        
        const username = currentUserObj.username;
        const userTasksState = window.tasksState ? window.tasksState[username] : null;
        
        if (!userTasksState || Object.keys(userTasksState).length === 0) {
            console.log('‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞–≤–¥–∞–Ω—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
            return;
        }

        console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –¥–ª—è ${username}...`);

        const sanitizedUsername = username.replace(/[.#$/[\]]/g, '_');
        const ref = database.ref(`users/${sanitizedUsername}/tasksState`);
        await ref.set(userTasksState);
        
        const updateRef = database.ref(`users/${sanitizedUsername}/lastTasksUpdate`);
        await updateRef.set(new Date().toISOString());
        
        console.log(`‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è ${username} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ`);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:', error);
    }
};

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–Ω—è
window.autoSaveDailySchedule = async function() {
    try {
        const currentUserObj = window.currentUser ? window.currentUser() : null;
        if (!currentUserObj) {
            console.log('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return;
        }
        
        const username = currentUserObj.username;
        const userSchedule = window.dailyScheduleState ? window.dailyScheduleState[username] : null;
        
        if (!userSchedule || userSchedule.length === 0) {
            console.log('‚ö†Ô∏è –ù–µ–º–∞—î —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
            return;
        }

        console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–ª—è ${username}...`, userSchedule);

        const sanitizedUsername = username.replace(/[.#$/[\]]/g, '_');
        const ref = window.database.ref(`users/${sanitizedUsername}/dailySchedule`);
        await ref.set(userSchedule);
        
        const updateRef = window.database.ref(`users/${sanitizedUsername}/lastScheduleUpdate`);
        await updateRef.set(new Date().toISOString());
        
        console.log(`‚úÖ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–ª—è ${username} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Firebase`);
        
        if (typeof window.showSaveStatus === 'function') {
            window.showSaveStatus('üíæ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', 'success');
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É:', error);
        
        if (typeof window.showSaveStatus === 'function') {
            window.showSaveStatus('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!', 'error');
        }
        
        return false;
    }
};

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–Ω—é (—Ç—ñ–ª—å–∫–∏ –¥–ª—è Dev)
window.autoSaveMenu = async function() {
    try {
        const currentUserObj = window.currentUser ? window.currentUser() : null;
        if (!currentUserObj) {
            console.log('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return;
        }
        
        const roleInfo = window.getTodayRoleInfo ? window.getTodayRoleInfo(currentUserObj.username) : {};
        if (roleInfo.role !== 'Dev') {
            console.log('‚ö†Ô∏è –¢—ñ–ª—å–∫–∏ Dev –º–æ–∂–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –º–µ–Ω—é');
            return;
        }
        
        const username = currentUserObj.username;
        const userMenu = window.weeklyMenuState ? window.weeklyMenuState[username] : null;
        
        const hasData = userMenu && Object.values(userMenu).some(day => 
            day && typeof day === 'object' && Object.keys(day).length > 0
        );
        
        if (!hasData) {
            console.log('‚ö†Ô∏è –ù–µ–º–∞—î –º–µ–Ω—é –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
            return;
        }

        console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–Ω—é –¥–ª—è ${username}...`, userMenu);

        const sanitizedUsername = username.replace(/[.#$/[\]]/g, '_');
        const ref = window.database.ref(`users/${sanitizedUsername}/weeklyMenu`);
        await ref.set(userMenu);
        
        const updateRef = window.database.ref(`users/${sanitizedUsername}/lastMenuUpdate`);
        await updateRef.set(new Date().toISOString());
        
        console.log(`‚úÖ –ú–µ–Ω—é –¥–ª—è ${username} —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ Firebase`);
        
        if (typeof window.showSaveStatus === 'function') {
            window.showSaveStatus('üíæ –ú–µ–Ω—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', 'success');
        }
        
        return true;
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–Ω—é:', error);
        
        if (typeof window.showSaveStatus === 'function') {
            window.showSaveStatus('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–µ–Ω—é!', 'error');
        }
        
        return false;
    }
};

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤ (—Å–ø—ñ–ª—å–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
window.autoSaveSupplies = async function() {
    try {
        const currentUserObj = window.currentUser ? window.currentUser() : null;
        if (!currentUserObj) {
            console.log('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return;
        }
        
        const role = window.getCurrentRole ? window.getCurrentRole(currentUserObj.username) : null;
        const editRoles = ['Dev', '–ö—É—Ö–Ω—è', '–ö–ª–∞–¥–æ–≤–∫–∞', '–í–∞–Ω–Ω–∞'];
        
        if (!editRoles.includes(role)) {
            console.log(`‚ö†Ô∏è ${role} –Ω–µ –º–∞—î –ø—Ä–∞–≤ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤`);
            return;
        }
        
        const supplies = window.suppliesStatus || {};
        const sanitizedSupplies = sanitizeFirebaseObject(supplies);
        
        const hasData = Object.keys(sanitizedSupplies).length > 0;
        
        if (!window.database) {
            console.log('‚ö†Ô∏è Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }
        
        const suppliesRef = window.database.ref('allData/supplies');
        await suppliesRef.set(hasData ? sanitizedSupplies : null);
        
        const updateRef = window.database.ref('allData/lastUpdated');
        await updateRef.set(new Date().toISOString());
        
        const userRef = window.database.ref('allData/lastUpdatedBy');
        await userRef.set(currentUserObj.name);
        
        console.log('üíæ –ó–∞–ø–∞—Å–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É Firebase');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤:', error);
    }
};

// –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫ (—Å–ø—ñ–ª—å–Ω–∏–π –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤)
window.autoSaveShoppingList = async function() {
    try {
        const currentUserObj = window.currentUser ? window.currentUser() : null;
        if (!currentUserObj) {
            console.log('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π');
            return;
        }
        
        const role = window.getCurrentRole ? window.getCurrentRole(currentUserObj.username) : null;
        const editRoles = ['Dev', '–ö—É—Ö–Ω—è', '–ö–ª–∞–¥–æ–≤–∫–∞', '–í–∞–Ω–Ω–∞'];
        
        if (!editRoles.includes(role)) {
            console.log(`‚ö†Ô∏è ${role} –Ω–µ –º–∞—î –ø—Ä–∞–≤ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫`);
            return;
        }
        
        const shopping = window.shoppingList || {};
        
        const hasData = Object.keys(shopping).length > 0;
        
        if (!window.database) {
            console.log('‚ö†Ô∏è Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }
        
        const shoppingRef = window.database.ref('allData/shoppingList');
        await shoppingRef.set(hasData ? shopping : null);
        
        const updateRef = window.database.ref('allData/lastUpdated');
        await updateRef.set(new Date().toISOString());
        
        const userRef = window.database.ref('allData/lastUpdatedBy');
        await userRef.set(currentUserObj.name);
        
        console.log('üíæ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É Firebase');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∫—É–ø–æ–∫:', error);
    }
};

// ===== AUTO-LOAD ON LOGIN =====

// –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –ø—Ä–∏ –≤—Ö–æ–¥—ñ
window.autoLoadTasksOnLogin = async function(username) {
    if (!username) return;
    
    try {
        console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å –¥–ª—è ${username}...`);
        
        const sanitizedUsername = username.replace(/[.#$/[\]]/g, '_');
        const ref = database.ref(`users/${sanitizedUsername}/tasksState`);
        const snapshot = await ref.once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            
            if (!window.tasksState) {
                window.tasksState = {};
            }
            
            window.tasksState[username] = data;
            console.log(`‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è ${username} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:`, data);
            
            const currentUser = window.currentUser ? window.currentUser() : null;
            if (currentUser && currentUser.username === username) {
                if (typeof window.renderTasks === 'function') {
                    window.renderTasks();
                }
            }
        } else {
            console.log(`‚ÑπÔ∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –∑–∞–≤–¥–∞–Ω—å –¥–ª—è ${username}`);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω—å:', error);
    }
};

// –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–Ω—è –ø—Ä–∏ –≤—Ö–æ–¥—ñ
window.autoLoadDailyScheduleOnLogin = async function(username) {
    if (!username) return;
    
    try {
        console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–ª—è ${username}...`);
        
        const sanitizedUsername = username.replace(/[.#$/[\]]/g, '_');
        const ref = window.database.ref(`users/${sanitizedUsername}/dailySchedule`);
        const snapshot = await ref.once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            
            if (!window.dailyScheduleState) {
                window.dailyScheduleState = {};
            }
            
            window.dailyScheduleState[username] = data;
            console.log(`‚úÖ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–ª—è ${username} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:`, data);
            
            const currentUser = window.currentUser ? window.currentUser() : null;
            if (currentUser && currentUser.username === username) {
                if (typeof window.renderDailySchedule === 'function') {
                    window.renderDailySchedule();
                }
            }
        } else {
            console.log(`‚ÑπÔ∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É –¥–ª—è ${username}`);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–æ–∑–ø–æ—Ä—è–¥–∫—É:', error);
    }
};

// –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –ø—Ä–∏ –≤—Ö–æ–¥—ñ
window.autoLoadMenuOnLogin = async function(username) {
    if (!username) return;
    
    try {
        console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –¥–ª—è ${username}...`);
        
        const sanitizedUsername = username.replace(/[.#$/[\]]/g, '_');
        const ref = window.database.ref(`users/${sanitizedUsername}/weeklyMenu`);
        const snapshot = await ref.once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            
            if (!window.weeklyMenuState) {
                window.weeklyMenuState = {};
            }
            
            window.weeklyMenuState[username] = data;
            console.log(`‚úÖ –ú–µ–Ω—é –¥–ª—è ${username} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:`, data);
            
            const currentUser = window.currentUser ? window.currentUser() : null;
            if (currentUser && currentUser.username === username) {
                if (typeof window.renderMenu === 'function') {
                    window.renderMenu();
                }
            }
        } else {
            console.log(`‚ÑπÔ∏è –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è ${username}`);
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é:', error);
    }
};

// –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤ –ø—Ä–∏ –≤—Ö–æ–¥—ñ
window.autoLoadSuppliesOnLogin = async function() {
    try {
        console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤ –∑ Firebase...');
        
        if (!window.database) {
            console.log('‚ö†Ô∏è Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }
        
        const ref = window.database.ref('allData/supplies');
        const snapshot = await ref.once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            window.suppliesStatus = data;
            console.log('‚úÖ –ó–∞–ø–∞—Å–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ Firebase:', data);
            
            if (typeof window.renderSupplies === 'function') {
                window.renderSupplies();
            }
        } else {
            console.log('‚ÑπÔ∏è –ó–∞–ø–∞—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ —É Firebase');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∞—Å—ñ–≤:', error);
    }
};

// –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫ –ø—Ä–∏ –≤—Ö–æ–¥—ñ
window.autoLoadShoppingListOnLogin = async function() {
    try {
        console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫ –∑ Firebase...');
        
        if (!window.database) {
            console.log('‚ö†Ô∏è Firebase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
            return;
        }
        
        const ref = window.database.ref('allData/shoppingList');
        const snapshot = await ref.once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            window.shoppingList = data;
            console.log('‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ Firebase:', data);
            
            if (typeof window.renderList === 'function') {
                window.renderList();
            }
        } else {
            console.log('‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É Firebase');
        }
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫:', error);
    }
};

// –ê–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–∏ –≤—Ö–æ–¥—ñ
window.autoLoadAllDataOnLogin = async function(username) {
    if (!username) return;
    
    console.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö...');
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await window.autoLoadTasksOnLogin(username);
    await window.autoLoadDailyScheduleOnLogin(username);
    await window.autoLoadMenuOnLogin(username);
    
    console.log('‚úÖ –í—Å—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ Firebase');
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø—ñ–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–∏ –≤—Ö–æ–¥—ñ
window.autoLoadSharedDataOnLogin = async function() {
    try {
        console.log('üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø—ñ–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö...');
        await window.autoLoadSuppliesOnLogin();
        await window.autoLoadShoppingListOnLogin();
        console.log('‚úÖ –°–ø—ñ–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø—ñ–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö:', error);
    }
};

console.log('‚úÖ Firebase config –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (–æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø–æ–≤–Ω–æ—é —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é)');
