// ===== FIREBASE CONFIGURATION =====

const firebaseConfig = {
    apiKey: "AIzaSyBDpCzT9SzSJptn0LqPYP-CjRGn6p-JbW0",
    authDomain: "halloween-planner.firebaseapp.com",
    databaseURL: "https://halloween-planner-default-rtdb.firebaseio.com",
    projectId: "halloween-planner",
    storageBucket: "halloween-planner.firebasestorage.app",
    messagingSenderId: "841307055659",
    appId: "1:841307055659:web:c8713c25b29e3f908fac6e",
    measurementId: "G-WZ5HN8E1T2"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const database = firebase.database();
const auth = firebase.auth();

// ===== UTILITY FUNCTIONS =====

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –∫–ª—é—á—ñ–≤ –≤—ñ–¥ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ Firebase
function sanitizeFirebaseKey(key) {
    if (typeof key !== 'string') return key;
    return key.replace(/[.#$/[\]]/g, '_');
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –∑ –≤–∫–ª–∞–¥–µ–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏
function sanitizeFirebaseObject(obj) {
    if (obj === null || obj === undefined) return obj;
    if (typeof obj !== 'object') return obj;
    if (Array.isArray(obj)) return obj.map(sanitizeFirebaseObject);
    
    const sanitized = {};
    for (const [key, value] of Object.entries(obj)) {
        const cleanKey = sanitizeFirebaseKey(key);
        sanitized[cleanKey] = sanitizeFirebaseObject(value);
    }
    return sanitized;
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function verifySecretCode(inputCode, username = null) {
    // –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –±–µ—Ä–µ–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ
    if (!username && window.currentUser) {
        username = window.currentUser().username;
    }
    
    if (!username || !USERS[username]) {
        console.error('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!');
        return false;
    }
    
    const user = USERS[username];
    const role = window.getCurrentRole ? window.getCurrentRole(username) : user.role;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–∞—î –ø—Ä–∞–≤–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏
    if (role === "Viewer") {
        console.error('‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ!');
        return false;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–¥
    return inputCode === user.secretCode;
}

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥—É (—Ç–µ–ø–µ—Ä –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ - –∫–æ–¥–∏ –≤ profiles.json)
window.setupSecretCode = async function(newCode) {
    alert("‚ö†Ô∏è –°–µ–∫—Ä–µ—Ç–Ω—ñ –∫–æ–¥–∏ –Ω–∞–ª–∞—à—Ç–æ–≤—É—é—Ç—å—Å—è –≤ —Ñ–∞–π–ª—ñ system/profiles.json");
};

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Firebase
function handleFirebaseError(error, operation) {
    console.error(`Firebase error (${operation}):`, error);
    
    if (error.code === 'PERMISSION_DENIED') {
        alert('‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –æ–ø–µ—Ä–∞—Ü—ñ—ó!');
    } else if (error.code === 'NETWORK_ERROR') {
        alert('‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º.');
    } else {
        alert(`‚ùå –ü–æ–º–∏–ª–∫–∞ ${operation}: ${error.message}`);
    }
}

// ===== GLOBAL SAVE/LOAD FUNCTIONS =====

window.saveAllToFirebase = async function() {
    const currentUserObj = window.currentUser ? window.currentUser() : null;
    if (!currentUserObj) {
        alert("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!");
        return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞
    const role = window.getCurrentRole(currentUserObj.username);
    if (role === "Viewer") {
        const roleInfo = window.getTodayRoleInfo(currentUserObj.username);
        alert(`‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö!\n\n–í–∞—à–∞ —Ä–æ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ (${roleInfo.dayName}): ${role}\n\n–í–∏ –º–æ–∂–µ—Ç–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –¥–∞–Ω—ñ —Ç—ñ–ª—å–∫–∏ –≤ —Å–≤–æ—ó —Ä–æ–±–æ—á—ñ –¥–Ω—ñ.`);
        return;
    }
    
    const code = prompt("üîê –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:");
    if (!code) return;
    
    const isValid = await verifySecretCode(code, currentUserObj.username);
    if (!isValid) {
        alert("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥!");
        return;
    }

    const btn = event ? event.target : null;
    const originalText = btn ? btn.textContent : '';
    
    if (btn) {
        btn.textContent = '‚è≥ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...';
        btn.disabled = true;
    }

    const allData = {
        dailySchedule: window.dailySchedule || [],
        tasks: window.tasks || [],
        weeklyMenu: window.weeklyMenu || {},
        supplies: sanitizeFirebaseObject(window.suppliesStatus || {}),
        shoppingList: window.shoppingList || {},
        lastUpdated: new Date().toISOString(),
        lastUpdatedBy: currentUserObj.name
    };

    try {
        await database.ref('allData').set(allData);
        alert(`‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ö–º–∞—Ä—É!\n\n–ó–±–µ—Ä–µ–∂–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º: ${currentUserObj.name}`);
    } catch (error) {
        handleFirebaseError(error, '–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
    } finally {
        if (btn) {
            btn.textContent = originalText;
            btn.disabled = false;
        }
    }
};

window.loadAllFromFirebase = async function() {
    const confirmation = confirm("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ –∑ —Ö–º–∞—Ä–∏?\n\n–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ!");
    if (!confirmation) return;

    const btn = event ? event.target : null;
    const originalText = btn ? btn.textContent : '';
    
    if (btn) {
        btn.textContent = '‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...';
        btn.disabled = true;
    }

    try {
        const snapshot = await database.ref('allData').once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            
            if (data.dailySchedule && Array.isArray(data.dailySchedule)) {
                window.dailySchedule = data.dailySchedule;
                if (typeof window.renderDailySchedule === 'function') {
                    window.renderDailySchedule();
                }
            }

            if (data.tasks && Array.isArray(data.tasks)) {
                window.tasks = data.tasks;
                if (typeof window.renderTasks === 'function') {
                    window.renderTasks();
                }
            }

            if (data.weeklyMenu && typeof data.weeklyMenu === 'object') {
                window.weeklyMenu = data.weeklyMenu;
                if (typeof window.renderMenu === 'function') {
                    window.renderMenu();
                }
            }

            if (data.supplies && typeof data.supplies === 'object') {
                window.suppliesStatus = data.supplies;
                if (typeof window.renderSupplies === 'function') {
                    window.renderSupplies();
                }
            }

            if (data.shoppingList && typeof data.shoppingList === 'object') {
                window.shoppingList = data.shoppingList;
                if (typeof window.renderList === 'function') {
                    window.renderList();
                }
            }
            
            const lastUpdated = data.lastUpdated ? new Date(data.lastUpdated).toLocaleString('uk-UA') : '–Ω–µ–≤—ñ–¥–æ–º–æ';
            const updatedBy = data.lastUpdatedBy ? `\n–û—Å—Ç–∞–Ω–Ω—î –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${data.lastUpdatedBy}` : '';
            alert(`‚úÖ –í—Å—ñ –¥–∞–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ö–º–∞—Ä–∏!\n\n–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: ${lastUpdated}${updatedBy}`);
        } else {
            alert("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É —Ö–º–∞—Ä—ñ!");
        }
    } catch (error) {
        handleFirebaseError(error, '–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    } finally {
        if (btn) {
            btn.textContent = originalText;
            btn.disabled = false;
        }
    }
};

// ===== INDIVIDUAL SAVE/LOAD FUNCTIONS =====

window.saveDailyToFirebase = async function() {
    const currentUserObj = window.currentUser ? window.currentUser() : null;
    if (!currentUserObj) {
        alert("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!");
        return;
    }
    
    const role = window.getCurrentRole(currentUserObj.username);
    if (role === "Viewer") {
        const roleInfo = window.getTodayRoleInfo(currentUserObj.username);
        alert(`‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö!\n\n–í–∞—à–∞ —Ä–æ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ (${roleInfo.dayName}): ${role}`);
        return;
    }
    
    const code = prompt("üîê –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:");
    if (!code) return;
    
    const isValid = await verifySecretCode(code, currentUserObj.username);
    if (!isValid) {
        alert("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥!");
        return;
    }

    if (!window.dailySchedule || window.dailySchedule.length === 0) {
        alert("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!");
        return;
    }

    try {
        await database.ref('allData/dailySchedule').set(window.dailySchedule);
        await database.ref('allData/lastUpdated').set(new Date().toISOString());
        await database.ref('allData/lastUpdatedBy').set(currentUserObj.name);
        alert("‚úÖ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ö–º–∞—Ä—É!");
    } catch (error) {
        handleFirebaseError(error, '–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
    }
};

window.loadDailyFromFirebase = async function() {
    const confirmation = confirm("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∑ —Ö–º–∞—Ä–∏?\n\n–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ!");
    if (!confirmation) return;

    try {
        const snapshot = await database.ref('allData/dailySchedule').once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            if (Array.isArray(data)) {
                window.dailySchedule = data;
                if (typeof window.renderDailySchedule === 'function') {
                    window.renderDailySchedule();
                }
                alert("‚úÖ –†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ö–º–∞—Ä–∏!");
            } else {
                alert("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö!");
            }
        } else {
            alert("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É —Ö–º–∞—Ä—ñ!");
        }
    } catch (error) {
        handleFirebaseError(error, '–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    }
};

window.saveTasksToFirebase = async function() {
    const currentUserObj = window.currentUser ? window.currentUser() : null;
    if (!currentUserObj) {
        alert("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!");
        return;
    }
    
    const role = window.getCurrentRole(currentUserObj.username);
    if (role === "Viewer") {
        const roleInfo = window.getTodayRoleInfo(currentUserObj.username);
        alert(`‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö!\n\n–í–∞—à–∞ —Ä–æ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ (${roleInfo.dayName}): ${role}`);
        return;
    }
    
    const code = prompt("üîê –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:");
    if (!code) return;
    
    const isValid = await verifySecretCode(code, currentUserObj.username);
    if (!isValid) {
        alert("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥!");
        return;
    }

    if (!window.tasks || window.tasks.length === 0) {
        alert("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!");
        return;
    }

    try {
        await database.ref('allData/tasks').set(window.tasks);
        await database.ref('allData/lastUpdated').set(new Date().toISOString());
        await database.ref('allData/lastUpdatedBy').set(currentUserObj.name);
        alert("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ö–º–∞—Ä—É!");
    } catch (error) {
        handleFirebaseError(error, '–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
    }
};

window.loadTasksFromFirebase = async function() {
    const confirmation = confirm("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è –∑ —Ö–º–∞—Ä–∏?\n\n–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ!");
    if (!confirmation) return;

    try {
        const snapshot = await database.ref('allData/tasks').once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            if (Array.isArray(data)) {
                window.tasks = data;
                if (typeof window.renderTasks === 'function') {
                    window.renderTasks();
                }
                alert("‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ö–º–∞—Ä–∏!");
            } else {
                alert("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö!");
            }
        } else {
            alert("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É —Ö–º–∞—Ä—ñ!");
        }
    } catch (error) {
        handleFirebaseError(error, '–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    }
};

window.saveMenuToFirebase = async function() {
    const currentUserObj = window.currentUser ? window.currentUser() : null;
    if (!currentUserObj) {
        alert("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!");
        return;
    }
    
    const role = window.getCurrentRole(currentUserObj.username);
    if (role === "Viewer") {
        const roleInfo = window.getTodayRoleInfo(currentUserObj.username);
        alert(`‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö!\n\n–í–∞—à–∞ —Ä–æ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ (${roleInfo.dayName}): ${role}`);
        return;
    }
    
    const code = prompt("üîê –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:");
    if (!code) return;
    
    const isValid = await verifySecretCode(code, currentUserObj.username);
    if (!isValid) {
        alert("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥!");
        return;
    }

    if (!window.weeklyMenu) {
        alert("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!");
        return;
    }

    const hasAnyMeals = Object.values(window.weeklyMenu).some(day => Object.keys(day).length > 0);
    if (!hasAnyMeals) {
        alert("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!");
        return;
    }

    try {
        await database.ref('allData/weeklyMenu').set(window.weeklyMenu);
        await database.ref('allData/lastUpdated').set(new Date().toISOString());
        await database.ref('allData/lastUpdatedBy').set(currentUserObj.name);
        alert("‚úÖ –ú–µ–Ω—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ö–º–∞—Ä—É!");
    } catch (error) {
        handleFirebaseError(error, '–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
    }
};

window.loadMenuFromFirebase = async function() {
    const confirmation = confirm("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–µ–Ω—é –∑ —Ö–º–∞—Ä–∏?\n\n–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ!");
    if (!confirmation) return;

    try {
        const snapshot = await database.ref('allData/weeklyMenu').once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            if (typeof data === 'object' && data !== null) {
                window.weeklyMenu = data;
                if (typeof window.renderMenu === 'function') {
                    window.renderMenu();
                }
                alert("‚úÖ –ú–µ–Ω—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ö–º–∞—Ä–∏!");
            } else {
                alert("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö!");
            }
        } else {
            alert("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É —Ö–º–∞—Ä—ñ!");
        }
    } catch (error) {
        handleFirebaseError(error, '–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    }
};

window.saveSuppliestoFirebase = async function() {
    const currentUserObj = window.currentUser ? window.currentUser() : null;
    if (!currentUserObj) {
        alert("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!");
        return;
    }
    
    const role = window.getCurrentRole(currentUserObj.username);
    if (role === "Viewer") {
        const roleInfo = window.getTodayRoleInfo(currentUserObj.username);
        alert(`‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö!\n\n–í–∞—à–∞ —Ä–æ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ (${roleInfo.dayName}): ${role}`);
        return;
    }
    
    const code = prompt("üîê –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:");
    if (!code) return;
    
    const isValid = await verifySecretCode(code, currentUserObj.username);
    if (!isValid) {
        alert("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥!");
        return;
    }

    if (!window.suppliesStatus || Object.keys(window.suppliesStatus).length === 0) {
        alert("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!");
        return;
    }

    const sanitizedSupplies = sanitizeFirebaseObject(window.suppliesStatus);

    try {
        await database.ref('allData/supplies').set(sanitizedSupplies);
        await database.ref('allData/lastUpdated').set(new Date().toISOString());
        await database.ref('allData/lastUpdatedBy').set(currentUserObj.name);
        alert("‚úÖ –ó–∞–ø–∞—Å–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ö–º–∞—Ä—É!");
    } catch (error) {
        handleFirebaseError(error, '–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
    }
};

window.loadSuppliesFromFirebase = async function() {
    const confirmation = confirm("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–ø–∞—Å–∏ –∑ —Ö–º–∞—Ä–∏?\n\n–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ!");
    if (!confirmation) return;

    try {
        const snapshot = await database.ref('allData/supplies').once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            if (typeof data === 'object' && data !== null) {
                window.suppliesStatus = data;
                if (typeof window.renderSupplies === 'function') {
                    window.renderSupplies();
                }
                alert("‚úÖ –ó–∞–ø–∞—Å–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ö–º–∞—Ä–∏!");
            } else {
                alert("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö!");
            }
        } else {
            alert("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É —Ö–º–∞—Ä—ñ!");
        }
    } catch (error) {
        handleFirebaseError(error, '–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    }
};

window.saveShopToFirebase = async function() {
    const currentUserObj = window.currentUser ? window.currentUser() : null;
    if (!currentUserObj) {
        alert("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!");
        return;
    }
    
    const role = window.getCurrentRole(currentUserObj.username);
    if (role === "Viewer") {
        const roleInfo = window.getTodayRoleInfo(currentUserObj.username);
        alert(`‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö!\n\n–í–∞—à–∞ —Ä–æ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ (${roleInfo.dayName}): ${role}`);
        return;
    }
    
    const code = prompt("üîê –í–≤–µ–¥—ñ—Ç—å –≤–∞—à —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:");
    if (!code) return;
    
    const isValid = await verifySecretCode(code, currentUserObj.username);
    if (!isValid) {
        alert("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–¥!");
        return;
    }

    if (!window.shoppingList || Object.keys(window.shoppingList).length === 0) {
        alert("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è!");
        return;
    }

    try {
        await database.ref('allData/shoppingList').set(window.shoppingList);
        await database.ref('allData/lastUpdated').set(new Date().toISOString());
        await database.ref('allData/lastUpdatedBy').set(currentUserObj.name);
        alert("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ —Ö–º–∞—Ä—É!");
    } catch (error) {
        handleFirebaseError(error, '–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
    }
};

window.loadShopFromFirebase = async function() {
    const confirmation = confirm("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑ —Ö–º–∞—Ä–∏?\n\n–ü–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –∑–∞–º—ñ–Ω–µ–Ω—ñ!");
    if (!confirmation) return;

    try {
        const snapshot = await database.ref('allData/shoppingList').once('value');
        
        if (snapshot.exists()) {
            const data = snapshot.val();
            if (typeof data === 'object' && data !== null) {
                window.shoppingList = data;
                if (typeof window.renderList === 'function') {
                    window.renderList();
                }
                alert("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ö–º–∞—Ä–∏!");
            } else {
                alert("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö!");
            }
        } else {
            alert("–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö —É —Ö–º–∞—Ä—ñ!");
        }
    } catch (error) {
        handleFirebaseError(error, '–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è');
    }
};

console.log('‚úÖ Firebase config –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (dynamic roles with individual secret codes)');
