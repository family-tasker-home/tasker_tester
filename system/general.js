// ===== GENERAL SITE LOGIC =====

window.createMainApp = function(currentUser, USERS) {
    const mainContent = document.getElementById('mainAppContent');
    
    if (!mainContent) {
        console.error('‚ùå mainAppContent –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
        return;
    }
    
    const roleInfo = window.getTodayRoleInfo ? window.getTodayRoleInfo(currentUser.username) : { role: currentUser.role };
    const todayRole = roleInfo.role || currentUser.role;
    const canModify = todayRole !== "Viewer";
    
    mainContent.innerHTML = `
        <!-- Sidebar Navigation -->
        <div class="sidebar" id="sidebar">
            <div class="sidebar-header">
                <h2>üéÉ –î—ñ–º</h2>
                <div class="user-badge">
                    <span>${currentUser.avatar || 'üë§'} ${currentUser.name}</span>
                    <span class="role-badge role-${todayRole.toLowerCase()}">${todayRole}</span>
                </div>
                <button class="close-btn" onclick="window.toggleSidebar()">‚úï</button>
            </div>
            <nav class="sidebar-nav">
                <button class="nav-item active" onclick="window.showSection('daily')">
                    <span class="nav-icon">üìÖ</span>
                    <span>–†–æ–∑–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è</span>
                </button>
                <button class="nav-item" onclick="window.showSection('tasks')">
                    <span class="nav-icon">üéØ</span>
                    <span>–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞–≤–¥–∞–Ω—å</span>
                </button>
                <button class="nav-item" onclick="window.showSection('menu')">
                    <span class="nav-icon">üçΩÔ∏è</span>
                    <span>–ú–µ–Ω—é –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å</span>
                </button>
                <button class="nav-item" onclick="window.showSection('recipes')">
                    <span class="nav-icon">üìñ</span>
                    <span>–ö–Ω–∏–≥–∞ —Ä–µ—Ü–µ–ø—Ç—ñ–≤</span>
                </button>
                <button class="nav-item" onclick="window.showSection('supplies')">
                    <span class="nav-icon">üì¶</span>
                    <span>–ó–∞–ø–∞—Å–∏</span>
                </button>
                <button class="nav-item" onclick="window.showSection('shop')">
                    <span class="nav-icon">üõí</span>
                    <span>–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫</span>
                </button>
                <button class="nav-item" onclick="window.showSection('assistant')">
                    <span class="nav-icon">ü§ñ</span>
                    <span>–ü–æ–º—ñ—á–Ω–∏–∫</span>
                </button>
                
                <div class="global-actions">
                    <button class="global-actions-logout" onclick="window.logout()">
                        <span>üö™</span>
                        <span>–í–∏–π—Ç–∏</span>
                    </button>
                </div>
            </nav>
        </div>

        <!-- Menu Toggle Button -->
        <button class="menu-toggle" onclick="window.toggleSidebar()">
            <span>‚ò∞</span>
        </button>

        <!-- Main Content -->
        <div class="main-content" id="mainContent">
            <div class="section active" id="daily-section"></div>
            <div class="section" id="tasks-section"></div>
            <div class="section" id="menu-section"></div>
            <div class="section" id="recipes-section"></div>
            <div class="section" id="supplies-section"></div>
            <div class="section" id="shop-section"></div>
            <div class="section" id="assistant-section"></div>
        </div>
    `;
    
    initializeApp(currentUser, USERS);
};

function initializeApp(currentUser, USERS) {
    if (typeof window.dailySchedule === 'undefined') window.dailySchedule = [];
    if (typeof window.tasks === 'undefined') window.tasks = [];
    if (typeof window.weeklyMenu === 'undefined') {
        window.weeklyMenu = {
            '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫': {},
            '–í—ñ–≤—Ç–æ—Ä–æ–∫': {},
            '–°–µ—Ä–µ–¥–∞': {},
            '–ß–µ—Ç–≤–µ—Ä': {},
            "–ü'—è—Ç–Ω–∏—Ü—è": {},
            '–°—É–±–æ—Ç–∞': {},
            '–ù–µ–¥—ñ–ª—è': {}
        };
    }
    if (typeof window.suppliesStatus === 'undefined') window.suppliesStatus = {};
    if (typeof window.shoppingList === 'undefined') window.shoppingList = {};
    
    if (typeof window.createDailySection === 'function') window.createDailySection();
    if (typeof window.createTasksSection === 'function') window.createTasksSection();
    if (typeof window.createMenuSection === 'function') window.createMenuSection();
    if (typeof window.createRecipesSection === 'function') window.createRecipesSection();
    if (typeof window.createSuppliesSection === 'function') window.createSuppliesSection();
    if (typeof window.createShopSection === 'function') window.createShopSection();
    
    createAssistantSection(currentUser, USERS);
    
    if (typeof window.initializeSupplies === 'function') {
        window.initializeSupplies();
        console.log('‚úÖ Supplies —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }
    
    if (typeof window.loadFromCache === 'function') {
        window.loadFromCache();
    }
    
    setTimeout(() => {
        if (typeof window.renderDailySchedule === 'function') window.renderDailySchedule();
        if (typeof window.renderTasks === 'function') window.renderTasks();
        if (typeof window.renderMenu === 'function') window.renderMenu();
        if (typeof window.renderSupplies === 'function') window.renderSupplies();
        if (typeof window.renderList === 'function') window.renderList();
        
        console.log('‚úÖ –í—Å—ñ —Ä–µ–Ω–¥–µ—Ä-—Ñ—É–Ω–∫—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–Ω–æ');
    }, 100);

    window.addEventListener('resize', function() {
        const sidebar = document.getElementById('sidebar');
        
        if (window.innerWidth > 768) {
            sidebar.classList.remove('hidden');
            sidebar.classList.remove('visible');
        } else {
            sidebar.classList.add('hidden');
        }
    });

    if (window.innerWidth <= 768) {
        const sidebar = document.getElementById('sidebar');
        sidebar.classList.add('hidden');
    }
    
    console.log('‚úÖ –ö—É—Ö–æ–Ω–Ω–∏–π –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!');
}

function createAssistantSection(currentUser, USERS) {
    const assistantSection = document.getElementById('assistant-section');
    if (!assistantSection) return;
    
    const userAvatar = currentUser.avatar || 'üë§';
    const userName = currentUser.name || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á';
    
    assistantSection.innerHTML = `
        <div id="assistant-content">
            <div class="chat-container">
                <div class="chat-header">
                    <h2><span class="jarvis-icon">ü§ñ</span> –î–∂–∞—Ä–≤—ñ—Å - –ö—É—Ö–æ–Ω–Ω–∏–π –ê—Å–∏—Å—Ç–µ–Ω—Ç</h2>
                    <div class="chat-user-info">
                        <span>–ü—Ä–æ—Ñ—ñ–ª—å: ${userAvatar} ${userName}</span>
                    </div>
                </div>
                <div class="chat-messages" id="chatMessages"></div>
                
                <!-- Voice Chat Panel -->
                <div class="voice-chat-panel">
                    <div class="voice-panel-header">
                        <div class="voice-panel-title">
                            <span class="icon">üé§</span>
                            <span>–ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º</span>
                        </div>
                        <button class="voice-stop-btn" onclick="window.stopVoiceChat()">
                            üõë –ó—É–ø–∏–Ω–∏—Ç–∏
                        </button>
                    </div>
                    
                    <div class="voice-status">
                        <div class="recording-indicator">
                            <div class="recording-dot"></div>
                            <span class="recording-text">–ó–ê–ü–ò–°...</span>
                        </div>
                        <div class="voice-status-text">–ì–æ–≤–æ—Ä—ñ—Ç—å –∑–∞—Ä–∞–∑ (–º–∞–∫—Å. 30 —Å–µ–∫)</div>
                        
                        <div class="voice-level-indicator">
                            <div class="voice-bar"></div>
                            <div class="voice-bar"></div>
                            <div class="voice-bar"></div>
                            <div class="voice-bar"></div>
                            <div class="voice-bar"></div>
                            <div class="voice-bar"></div>
                            <div class="voice-bar"></div>
                            <div class="voice-bar"></div>
                            <div class="voice-bar"></div>
                            <div class="voice-bar"></div>
                        </div>
                    </div>
                    
                    <div class="voice-processing">
                        <div class="voice-processing-spinner"></div>
                        <div class="voice-processing-text">–û–±—Ä–æ–±–∫–∞ –≤–∞—à–æ–≥–æ –≥–æ–ª–æ—Å—É...</div>
                    </div>
                    
                    <div class="voice-instructions">
                        <strong>üí° –ü—ñ–¥–∫–∞–∑–∫–∏:</strong><br>
                        ‚Ä¢ –ì–æ–≤–æ—Ä—ñ—Ç—å —á—ñ—Ç–∫–æ —Ç–∞ –Ω–µ –¥—É–∂–µ —à–≤–∏–¥–∫–æ<br>
                        ‚Ä¢ –£–Ω–∏–∫–∞–π—Ç–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º—É<br>
                        ‚Ä¢ –†–æ–∑–º–æ–≤–ª—è–π—Ç–µ –ø—Ä–∏—Ä–æ–¥–Ω—å–æ, —è–∫ –∑ –ª—é–¥–∏–Ω–æ—é<br>
                        ‚Ä¢ –ú–æ–∂–µ—Ç–µ –¥–∞–≤–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ ("–¥–æ–¥–∞–π –∑–∞–ø–∞—Å", "—â–æ –≤ –º–µ–Ω—é")
                    </div>
                    
                    <div class="voice-api-info">
                        <span class="icon">üîë</span>
                        <span>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤–∏–¥—ñ–ª–µ–Ω—ñ –∫–ª—é—á—ñ –¥–ª—è –≥–æ–ª–æ—Å—É (API #6-10)</span>
                    </div>
                </div>
                
                <div class="chat-input-container">
                    <div class="chat-input-wrapper">
                        <textarea 
                            id="chatInput" 
                            class="chat-input" 
                            placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –î–∂–∞—Ä–≤—ñ—Å—É..."
                            onkeypress="window.handleKeyPress(event)"
                            rows="1"
                        ></textarea>
                        
                        <button class="voice-chat-btn" onclick="window.toggleVoiceChat()" title="–ì–æ–ª–æ—Å–æ–≤–∏–π —á–∞—Ç">
                            üé§
                        </button>
                        
                        <button class="chat-send-btn" onclick="window.sendMessage()">
                            <span>üì§</span>
                        </button>
                    </div>
                    <div class="chat-controls">
                        <button class="chat-clear-btn" onclick="window.clearChat()">
                            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç–∏ —á–∞—Ç
                        </button>
                        <div class="chat-status online">
                            <span>üü¢</span> –û–Ω–ª–∞–π–Ω
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `;
    
    if (typeof window.initChat === 'function') {
        window.initChat();
    }
    
    if (typeof window.initVoiceSystem === 'function') {
        window.initVoiceSystem();
    }
}

window.toggleVoiceChat = function() {
    if (typeof isVoiceActive !== 'undefined' && isVoiceActive) {
        window.stopVoiceChat();
    } else {
        window.startVoiceChat();
    }
};

window.toggleSidebar = function() {
    const sidebar = document.getElementById('sidebar');
    sidebar.classList.toggle('visible');
    sidebar.classList.toggle('hidden');
};

window.showSection = function(sectionName) {
    const sections = document.querySelectorAll('.section');
    sections.forEach(section => section.classList.remove('active'));

    const targetSection = document.getElementById(`${sectionName}-section`);
    if (targetSection) targetSection.classList.add('active');

    const navItems = document.querySelectorAll('.nav-item');
    navItems.forEach(item => item.classList.remove('active'));

    if (event && event.target) {
        event.target.closest('.nav-item').classList.add('active');
    }

    if (sectionName === 'menu' && typeof window.renderMenu === 'function') {
        window.renderMenu();
    }

    if (window.innerWidth <= 768) {
        window.toggleSidebar();
    }
};

window.checkSavePermissions = function() {
    if (!window.canSaveToFirebase()) {
        const currentUser = window.currentUser ? window.currentUser() : null;
        if (currentUser) {
            const roleInfo = window.getTodayRoleInfo ? window.getTodayRoleInfo(currentUser.username) : {};
            alert(`‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö!\n\n–í–∞—à–∞ —Ä–æ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ: ${roleInfo.role || 'Viewer'}`);
        } else {
            alert('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!');
        }
        return false;
    }
    return true;
};

window.checkModifyPermissions = function() {
    if (!window.canModifyData()) {
        const currentUser = window.currentUser ? window.currentUser() : null;
        if (currentUser) {
            const roleInfo = window.getTodayRoleInfo ? window.getTodayRoleInfo(currentUser.username) : {};
            alert(`‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö!\n\n–í–∞—à–∞ —Ä–æ–ª—å —Å—å–æ–≥–æ–¥–Ω—ñ: ${roleInfo.role || 'Viewer'}`);
        } else {
            alert('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π!');
        }
        return false;
    }
    return true;
};

document.addEventListener('DOMContentLoaded', function() {
    console.log('üéÉ –ö—É—Ö–æ–Ω–Ω–∏–π –ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...');
});

console.log('‚úÖ General system –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ –≥–æ–ª–æ—Å–æ–≤–æ—é –ø–∞–Ω–µ–ª–ª—é');
